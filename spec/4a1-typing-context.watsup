;;
;; Cursor
;;

syntax cursor = GLOBAL | BLOCK | LOCAL

var p : cursor

;;
;; Layered context
;;

;; Global layer

syntax glayer =
  { CDENV cdenv,
    TDENV tdenv,
    FDENV fdenv,
    FRAME frame }

;; Block layer

syntax bkind = EMPTY | EXTERN | PARSER | CONTROL | PACKAGE

syntax blayer =
  { ID id,
    KIND bkind,
    TDENV tdenv,
    FDENV fdenv,
    FRAME frame }

;; Local layer

syntax lkind =
  | EMPTY
  | EXTERNFUNC
  | FUNC typ
  | ACTION
  | EXTERNMETHOD
  | EXTERNABSTRACTMETHOD typ
  | PARSERSTATE
  | CONTROLAPPLYMETHOD
  | TABLEAPPLYMETHOD

syntax llayer =
  { ID id,
    KIND lkind,
    TDENV tdenv,
    FRAMES frame* }

;;
;; Typing context
;;

syntax context =
  { GLOBAL glayer,
    BLOCK blayer,
    LOCAL llayer }

var C : context

;;
;; Constructor
;;

dec $empty_context : context

def $empty_context = C
  -- if glayer =
      { CDENV $empty_map<cid, consdef>,
        TDENV $empty_map<tid, typdef>,
        FDENV $empty_map<fid, funcdef>,
        FRAME $empty_map<id, styp> }
  -- if blayer =
      { ID "",
        KIND EMPTY,
        TDENV $empty_map<tid, typdef>,
        FDENV $empty_map<fid, funcdef>,
        FRAME $empty_map<id, styp> }
  -- if llayer =
      { ID "",
        KIND EMPTY,
        TDENV $empty_map<tid, typdef>,
        FRAMES ([ $empty_map<id, styp> ]) }
  -- if C = { GLOBAL glayer, BLOCK blayer, LOCAL llayer }

;;
;; Frame management
;;

dec $enter(context) : context
    hint(show ENTER %)

def $enter(C) = C[ .LOCAL.FRAMES = $empty_map<id, styp> :: C.LOCAL.FRAMES ]

dec $exit(context) : context
    hint(show EXIT %)

def $exit(C) = C[ .LOCAL.FRAMES = frame_t* ]
  -- if frame_h :: frame_t* = C.LOCAL.FRAMES

;;
;; Setters
;;

dec $set_blockkind(context, bkind) : context
    hint(show %1.BLOCK.KIND = %2)

def $set_blockkind(C, bkind) = C[ .BLOCK.KIND = bkind ]

dec $set_localkind(context, lkind) : context 
    hint(show %1.LOCAL..KIND = %2)

def $set_localkind(C, lkind) = C[ .LOCAL.KIND = lkind ]

dec $set_blockframe(context, frame) : context
    hint(show %1.BLOCK#%latex("\\{") FRAME = %2 %latex("\\}"))

;;
;; Getters
;;

dec $get_typ_ret_lkind(lkind) : typ
    hint(show RETURN TYPE OF %)

def $get_typ_ret_lkind(FUNC typ) = typ
def $get_typ_ret_lkind(ACTION) = VoidT
def $get_typ_ret_lkind(EXTERNABSTRACTMETHOD typ) = typ
def $get_typ_ret_lkind(CONTROLAPPLYMETHOD) = VoidT

;;
;; Collecting bound type identifiers
;;

dec $bound_tids(cursor, context) : tidset

def $bound_tids(GLOBAL, C) = $empty_set<tid>
def $bound_tids(BLOCK, C) = $dom_map<tid, typdef>(C.BLOCK.TDENV)
def $bound_tids(LOCAL, C) = $union_set<tid>($dom_map<tid, typdef>(C.LOCAL.TDENV), $bound_tids(BLOCK, C))

;;
;; Adders
;;

;; Adder for static types

dec $add_styp(cursor, context, id, styp) : context
    hint(show %2.%1.FRAME#(S)#%latex("\\{")#%3#%latex("\\mapsto")#%4#%latex("\\}"))

def $add_styp(GLOBAL, C, id, styp) = C[ .GLOBAL.FRAME = frame ]
  -- if ~$in_set<id>(id, $dom_map<id, styp>(C.GLOBAL.FRAME))
  -- if frame = $add_map<id, styp>(C.GLOBAL.FRAME, id, styp)
def $add_styp(BLOCK, C, id, styp) = C[ .BLOCK.FRAME = frame ]
  -- if ~$in_set<id>(id, $dom_map<id, styp>(C.BLOCK.FRAME))
  -- if frame = $add_map<id, styp>(C.BLOCK.FRAME, id, styp)
def $add_styp(LOCAL, C, id, styp) = C[ .LOCAL.FRAMES = frame* ]
  -- if frame_h :: frame_t* = C.LOCAL.FRAMES
  -- if ~$in_set<id>(id, $dom_map<id, styp>(frame_h))
  -- if frame_h' = $add_map<id, styp>(frame_h, id, styp)
  -- if frame* = frame_h' :: frame_t*

dec $add_styps(cursor, context, id*, styp*) : context
    hint(show %2.%1.FRAME#(S)#%latex("\\{")#%3#%latex("\\mapsto^{*}")#%4#%latex("\\}"))

def $add_styps(cursor, C, eps, eps) = C
def $add_styps(cursor, C, id_h :: id_t*, styp_h :: styp_t*) = C''
    -- if C' = $add_styp(cursor, C, id_h, styp_h)
    -- if C'' = $add_styps(cursor, C', id_t*, styp_t*)

;; Adder for parameters

dec $add_param(cursor, context, paramtyp) : context

def $add_param(p, C, pt) = C'
    -- if id NO typ val? = pt
    -- if C' = $add_styp(p, C, id, typ NO CTK eps)
def $add_param(p, C, pt) = C'
    -- if id dir typ val? = pt
    -- if dir = IN \/ dir = OUT \/ dir = INOUT
    -- if C' = $add_styp(p, C, id, typ dir DYN eps)

dec $add_params(cursor, context, paramtyp*) : context

def $add_params(p, C, eps) = C
def $add_params(p, C, pt_h :: pt_t*) = C''
    -- if C' = $add_param(p, C, pt_h)
    -- if C'' = $add_params(p, C', pt_t*)

;; Adder for type definitions

dec $add_typdef(cursor, context, tid, typdef) : context
    hint(show %2.%1.TDENV#%latex("\\{")#%3#%latex("\\mapsto")#%4#%latex("\\}"))

def $add_typdef(GLOBAL, C, tid, td) = C[ .GLOBAL.TDENV = tdenv ]
  -- if ~$in_set<tid>(tid, $dom_map<tid, typdef>(C.GLOBAL.TDENV))
  -- if tdenv = $add_map<tid, typdef>(C.GLOBAL.TDENV, tid, td)
def $add_typdef(BLOCK, C, tid, td) = C[ .BLOCK.TDENV = tdenv ]
  -- if ~$in_set<tid>(tid, $dom_map<tid, typdef>(C.BLOCK.TDENV))
  -- if tdenv = $add_map<tid, typdef>(C.BLOCK.TDENV, tid, td)
def $add_typdef(LOCAL, C, tid, td) = C[ .LOCAL.TDENV = tdenv ]
  -- if ~$in_set<tid>(tid, $dom_map<tid, typdef>(C.LOCAL.TDENV))
  -- if tdenv = $add_map<tid, typdef>(C.LOCAL.TDENV, tid, td)

dec $add_typdefs(cursor, context, tid*, typdef*) : context
    hint(show %2.%1.TDENV#%latex("\\{")#%3#%latex("\\mapsto^{*}")#%4#%latex("\\}"))

def $add_typdefs(p, C, eps, eps) = C
def $add_typdefs(p, C, tid_h :: tid_t*, td_h :: td_t*) = C''
    -- if C' = $add_typdef(p, C, tid_h, td_h)
    -- if C'' = $add_typdefs(p, C', tid_t*, td_t*)

;; Adder for type parameters

dec $add_tparam(cursor, context, tparam) : context

def $add_tparam(BLOCK, C, tparam) = C[ .BLOCK.TDENV = tdenv ]
  -- if td = MonoD (VarT tparam)
  -- if ~$in_set<tid>(tparam, $dom_map<tid, typdef>(C.BLOCK.TDENV))
  -- if tdenv = $add_map<tid, typdef>(C.BLOCK.TDENV, tparam, td)
def $add_tparam(LOCAL, C, tparam) = C[ .LOCAL.TDENV = tdenv ]
  -- if td = MonoD (VarT tparam)
  -- if ~$in_set<tid>(tparam, $dom_map<tid, typdef>(C.LOCAL.TDENV))
  -- if tdenv = $add_map<tid, typdef>(C.LOCAL.TDENV, tparam, td)

dec $add_tparams(cursor, context, tparam*) : context

def $add_tparams(p, C, eps) = C
def $add_tparams(p, C, tparam_h :: tparam_t*) = C''
    -- if C' = $add_tparam(p, C, tparam_h)
    -- if C'' = $add_tparams(p, C', tparam_t*)

;; Adder for function definitions

dec $add_funcdef(cursor, context, fid, funcdef) : context
    hint(show %2.%1.FDENV#%latex("\\{")#%3#%latex("\\mapsto")#%4#%latex("\\}"))

def $add_funcdef(GLOBAL, C, fid, fd) = C[ .GLOBAL.FDENV = fdenv ]
  -- if ~$in_set<fid>(fid, $dom_map<fid, funcdef>(C.GLOBAL.FDENV))
  -- if fdenv = $add_map<fid, funcdef>(C.GLOBAL.FDENV, fid, fd)
def $add_funcdef(BLOCK, C, fid, fd) = C[ .BLOCK.FDENV = fdenv ]
  -- if ~$in_set<fid>(fid, $dom_map<fid, funcdef>(C.BLOCK.FDENV))
  -- if fdenv = $add_map<fid, funcdef>(C.BLOCK.FDENV, fid, fd)

dec $add_funcdef_non_overload(cursor, context, fid, funcdef) : context
    hint(show %2.%1.FDENV#%latex("\\{")#%3#%latex("\\mapsto")#%4#%latex("\\}"))

def $add_funcdef_non_overload(GLOBAL, C, fid, fd) = C[ .GLOBAL.FDENV = fdenv ]
  -- if `{ (id_k _)* } = $dom_map<fid, funcdef>(C.GLOBAL.FDENV)
  -- if id _ = fid
  -- if ~(id <- id_k*)
  -- if fdenv = $add_map<fid, funcdef>(C.GLOBAL.FDENV, fid, fd)
def $add_funcdef_non_overload(BLOCK, C, fid, fd) = C[ .BLOCK.FDENV = fdenv ]
  -- if `{ (id_k _)* } = $dom_map<fid, funcdef>(C.BLOCK.FDENV)
  -- if id _ = fid
  -- if ~(id <- id_k*)
  -- if fdenv = $add_map<fid, funcdef>(C.BLOCK.FDENV, fid, fd)

;; Adder for constructor definitions

dec $add_consdef(cursor, context, fid, consdef) : context
    hint(show %2.%1.CDENV#%latex("\\{")#%3#%latex("\\mapsto")#%4#%latex("\\}"))

def $add_consdef(GLOBAL, C, cid, cd) = C[ .GLOBAL.CDENV = cdenv ]
  -- if ~$in_set<cid>(cid, $dom_map<cid, consdef>(C.GLOBAL.CDENV))
  -- if cdenv = $add_map<cid, consdef>(C.GLOBAL.CDENV, cid, cd)

;;
;; Finders
;;

;; Finder for static types

dec $find_styp(cursor, context, name) : styp?
    hint(show %2#%latex("@")#%1.FRAME#(S)#%latex()`[%3])

def $find_styp(p, C, TOP id) = $find_map<id, styp>(C.GLOBAL.FRAME, id)
def $find_styp(GLOBAL, C, CURRENT id) = $find_map<id, styp>(C.GLOBAL.FRAME, id)
def $find_styp(BLOCK, C, CURRENT id) = styp
  -- if styp = $find_map<id, styp>(C.BLOCK.FRAME, id)
def $find_styp(BLOCK, C, CURRENT id) = $find_styp(GLOBAL, C, CURRENT id)
  -- if eps = $find_map<id, styp>(C.BLOCK.FRAME, id)
def $find_styp(LOCAL, C, CURRENT id) = styp
  -- if styp = $find_maps<id, styp>(C.LOCAL.FRAMES, id)
def $find_styp(LOCAL, C, CURRENT id) = $find_styp(BLOCK, C, CURRENT id)
  -- if eps = $find_maps<id, styp>(C.LOCAL.FRAMES, id)

;; Finder for values

dec $find_val(cursor, context, name) : val?
    hint(show %2#%latex("@")#%1.FRAME`[%3])

def $find_val(p, C, name) = val
  -- if typ dir ctk val = $find_styp(p, C, name)

;; Finder for type definitions

dec $find_typdef(cursor, context, name) : typdef?
    hint(show %2#%latex("@")#%1.TDENV`[%3])

def $find_typdef(p, C, TOP id) = $find_map<tid, typdef>(C.GLOBAL.TDENV, id)
def $find_typdef(GLOBAL, C, CURRENT id) = $find_map<tid, typdef>(C.GLOBAL.TDENV, id)
def $find_typdef(BLOCK, C, CURRENT id) = td
  -- if td = $find_map<tid, typdef>(C.BLOCK.TDENV, id)
def $find_typdef(BLOCK, C, CURRENT id) = $find_typdef(GLOBAL, C, CURRENT id)
  -- if eps = $find_map<tid, typdef>(C.BLOCK.TDENV, id)
def $find_typdef(LOCAL, C, CURRENT id) = td
  -- if td = $find_map<tid, typdef>(C.LOCAL.TDENV, id)
def $find_typdef(LOCAL, C, CURRENT id) = $find_typdef(BLOCK, C, CURRENT id)
  -- if eps = $find_map<tid, typdef>(C.LOCAL.TDENV, id)

;; Finder for function definitions

dec $to_fkey(arg*) : (id?)*

def $to_fkey(eps) = eps
def $to_fkey(arg_h :: arg_t*) = id :: $to_fkey(arg_t*)
  -- if NameA id _ = arg_h
def $to_fkey(arg_h :: arg_t*) = eps :: $to_fkey(arg_t*)
  -- otherwise

dec $find_funcdef(cursor, context, name, arg*) : (fid, funcdef, id*)?
    hint(show %2#%latex("@")#%1.FDENV`[%3#(%4)#%latex()])

def $find_funcdef(p, C, TOP id, arg*) = $find_func<funcdef>(id, $to_fkey(arg*), C.GLOBAL.FDENV)
def $find_funcdef(GLOBAL, C, CURRENT id, arg*) = $find_func<funcdef>(id, $to_fkey(arg*), C.GLOBAL.FDENV)
def $find_funcdef(BLOCK, C, CURRENT id, arg*) = (fid, fd, id_deft*)
  -- if (fid, fd, id_deft*) = $find_func<funcdef>(id, $to_fkey(arg*), C.BLOCK.FDENV)
def $find_funcdef(BLOCK, C, CURRENT id, arg*) = $find_funcdef(GLOBAL, C, CURRENT id, arg*)
  -- if eps = $find_func<funcdef>(id, $to_fkey(arg*), C.BLOCK.FDENV)
def $find_funcdef(LOCAL, C, CURRENT id, arg*) = $find_funcdef(BLOCK, C, CURRENT id, arg*)

dec $find_funcdef_by_name(cursor, context, name) : funcdef?
    hint(show %2#%latex("@")#%1.FDENV`[%3])

def $find_funcdef_by_name(p, C, TOP id) = $find_func_by_name(id, C.GLOBAL.FDENV)
def $find_funcdef_by_name(GLOBAL, C, CURRENT id) = $find_func_by_name(id, C.GLOBAL.FDENV)
def $find_funcdef_by_name(BLOCK, C, CURRENT id) = fd
  -- if fd = $find_func_by_name(id, C.BLOCK.FDENV)
def $find_funcdef_by_name(BLOCK, C, CURRENT id) = $find_funcdef_by_name(GLOBAL, C, CURRENT id)
  -- if eps = $find_func_by_name(id, C.BLOCK.FDENV)
def $find_funcdef_by_name(LOCAL, C, CURRENT id) = $find_funcdef_by_name(BLOCK, C, CURRENT id)

;; Finder for constructor definitions

dec $find_consdef(cursor, context, name, arg*) : (cid, consdef, id*)?
    hint(show %2#%latex("@")#%1.CDENV`[%3#(%4)#%latex()])

def $find_consdef(p, C, TOP id, arg*) = $find_func<consdef>(id, $to_fkey(arg*), C.GLOBAL.CDENV)
def $find_consdef(GLOBAL, C, CURRENT id, arg*) = $find_func<consdef>(id, $to_fkey(arg*), C.GLOBAL.CDENV)
def $find_consdef(BLOCK, C, CURRENT id, arg*) = $find_consdef(GLOBAL, C, CURRENT id, arg*)
def $find_consdef(LOCAL, C, CURRENT id, arg*) = $find_consdef(BLOCK, C, CURRENT id, arg*)
