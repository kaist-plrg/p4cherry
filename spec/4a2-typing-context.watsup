;;
;; Cursor
;;

syntax cursor = GLOBAL | BLOCK | LOCAL

var p : cursor

;;
;; Layered tcontext
;;

;; Global layer

syntax gtlayer =
  { CDENV cdenv,
    TDENV tdenv,
    FDENV fdenv,
    FRAME frame }

;; Block layer

syntax bkind = EMPTY | EXTERN | PARSER | CONTROL | PACKAGE

syntax btlayer =
  { ID id,
    KIND bkind,
    TDENV tdenv,
    FDENV fdenv,
    FRAME frame }

;; Local layer

syntax lkind =
  | EMPTY
  | EXTERNFUNC
  | FUNC typ
  | ACTION
  | EXTERNMETHOD
  | EXTERNABSTRACTMETHOD typ
  | PARSERSTATE
  | CONTROLAPPLYMETHOD
  | TABLEAPPLYMETHOD

syntax ltlayer =
  { ID id,
    KIND lkind,
    TDENV tdenv,
    FRAMES frame* }

;;
;; Typing context
;;

syntax tcontext =
  { GLOBAL gtlayer,
    BLOCK btlayer,
    LOCAL ltlayer }

var C : tcontext

;;
;; Frame management
;;

def $enter(tcontext) : tcontext   hint(show ENTER %)

def $enter(C) = C[ .LOCAL.FRAMES = $empty_map(id, styp) C.LOCAL.FRAMES ]

def $exit(tcontext) : tcontext    hint(show EXIT %)

def $exit(C) = C[ .LOCAL.FRAMES = frame_t* ]
  -- if frame_h frame_t* = C.LOCAL.FRAMES

;;
;; Setters
;;

def $set_blockkind(tcontext, bkind) : tcontext  hint(show %1.BLOCK.KIND = %2)
def $set_blockkind(C, bkind) = C[ .BLOCK.KIND = bkind ]

def $set_localkind(tcontext, lkind) : tcontext  hint(show %1.LOCAL..KIND = %2)
def $set_localkind(C, lkind) = C[ .LOCAL.KIND = lkind ]

def $set_blockframe(tcontext, frame) : tcontext  hint(show %1.BLOCK#%latex("\\{") FRAME = %2 %latex("\\}"))

;;
;; Getters
;;

def $get_typ_ret(lkind) : typ  hint(show RETURN TYPE OF %)

def $get_typ_ret(FUNC typ) = typ
def $get_typ_ret(ACTION) = VoidT
def $get_typ_ret(EXTERNABSTRACTMETHOD typ) = typ
def $get_typ_ret(CONTROLAPPLYMETHOD) = VoidT

;;
;; Collecting bound type identifiers
;;

def $bound_tid(cursor, tcontext) : tidset

def $bound_tid(GLOBAL, C) = SET eps
def $bound_tid(BLOCK, C) = $dom_map(tid, typdef, C.BLOCK.TDENV)
def $bound_tid(LOCAL, C) = $union_set(tid, $dom_map(tid, typdef, C.LOCAL.TDENV), $bound_tid(BLOCK, C))

;;
;; Adders
;;

;; Adder for static types

def $add_styp(cursor, tcontext, id, styp) : tcontext                  hint(show %2.%1.FRAME#(S)#%latex("\\{")#%3#%latex("\\mapsto")#%4#%latex("\\}"))

def $add_styp(GLOBAL, C, id, styp) = C[ .GLOBAL.FRAME = frame ]
  -- if frame = $add_map(id, styp, C.GLOBAL.FRAME, id, styp)
def $add_styp(BLOCK, C, id, styp) = C[ .BLOCK.FRAME = frame ]
  -- if frame = $add_map(id, styp, C.BLOCK.FRAME, id, styp)
def $add_styp(LOCAL, C, id, styp) = C[ .LOCAL.FRAMES = frame* ]
  -- if frame_h frame_t* = C.LOCAL.FRAMES
  -- if frame_h' = $add_map(id, styp, frame_h, id, styp)
  -- if frame* = frame_h' frame_t*

def $add_styps(cursor, tcontext, id*, styp*) : tcontext               hint(show %2.%1.FRAME#(S)#%latex("\\{")#%3#%latex("\\mapsto^{*}")#%4#%latex("\\}"))

def $add_styps(p, C, eps, eps) = C
def $add_styps(p, C, id_h id_t*, styp_h styp_t*) = C''
  -- if C' = $add_styp(p, C, id_h, styp_h)
  -- if C'' = $add_styps(p, C', id_t*, styp_t*)

;; Adder for parameters

def $add_param(cursor, tcontext, paramtyp) : tcontext                 hint(show %2.%1.FRAME#(S)#%latex("\\{")#%3#%latex("\\mapsto")#%4#%latex("\\}"))

def $add_param(p, C, pt) = C'
    -- if id NO typ val? = pt
    -- if C' = $add_styp(p, C, id, typ NO CTK eps)
def $add_param(p, C, pt) = C'
    -- if id dir typ val? = pt
    -- if dir = IN \/ dir = OUT \/ dir = INOUT
    -- if C' = $add_styp(p, C, id, typ dir DYN eps)

def $add_params(cursor, tcontext, paramtyp*) : tcontext               hint(show %2.%1.FRAME#(S)#%latex("\\{")#%3#%latex("\\mapsto^{*}")#%4#%latex("\\}"))

def $add_params(p, C, eps) = C
def $add_params(p, C, pt_h pt_t*) = C''
    -- if C' = $add_param(p, C, pt_h)
    -- if C'' = $add_params(p, C', pt_t*)

;; Adder for type definitions

def $add_typdef(cursor, tcontext, tid, typdef) : tcontext             hint(show %2.%1.TDENV#%latex("\\{")#%3#%latex("\\mapsto")#%4#%latex("\\}"))

def $add_typdef(GLOBAL, C, tid, td) = C[ .GLOBAL.TDENV = tdenv ]
  -- if tdenv = $add_map(tid, typdef, C.GLOBAL.TDENV, tid, td)
def $add_typdef(BLOCK, C, tid, td) = C[ .BLOCK.TDENV = tdenv ]
  -- if tdenv = $add_map(tid, typdef, C.BLOCK.TDENV, tid, td)
def $add_typdef(LOCAL, C, tid, td) = C[ .LOCAL.TDENV = tdenv ]
  -- if tdenv = $add_map(tid, typdef, C.LOCAL.TDENV, tid, td)

def $add_typdefs(cursor, tcontext, tid*, typdef*) : tcontext          hint(show %2.%1.TDENV#%latex("\\{")#%3#%latex("\\mapsto^{*}")#%4#%latex("\\}"))

def $add_typdefs(p, C, eps, eps) = C
def $add_typdefs(p, C, tid_h tid_t*, td_h td_t*) = C''
  -- if C' = $add_typdef(p, C, tid_h, td_h)
  -- if C'' = $add_typdefs(p, C', tid_t*, td_t*)

;; Adder for function definitions

def $add_funcdef(cursor, tcontext, fid, funcdef) : tcontext           hint(show %2.%1.FDENV#%latex("\\{")#%3#%latex("\\mapsto")#%4#%latex("\\}"))

def $add_funcdef(GLOBAL, C, fid, fd) = C[ .GLOBAL.FDENV = fdenv ]
  -- if fdenv = $add_map(fid, funcdef, C.GLOBAL.FDENV, fid, fd)
def $add_funcdef(BLOCK, C, fid, fd) = C[ .BLOCK.FDENV = fdenv ]
  -- if fdenv = $add_map(fid, funcdef, C.BLOCK.FDENV, fid, fd)

;; Adder for constructor definitions

def $add_consdef(cursor, tcontext, fid, consdef) : tcontext           hint(show %2.%1.CDENV#%latex("\\{")#%3#%latex("\\mapsto")#%4#%latex("\\}"))

def $add_consdef(GLOBAL, C, cid, cd) = C[ .GLOBAL.CDENV = cdenv ]
  -- if cdenv = $add_map(cid, consdef, C.GLOBAL.CDENV, cid, cd)

;;
;; Finders
;;

;; Finder for static types

def $find_styp(cursor, tcontext, name) : styp                              hint(show %2#%latex("@")#%1.FRAME#(S)#%latex()`[%3])

def $find_styp(p, C, TOP id) = $find_map(id, styp, C.GLOBAL.FRAME, id)
def $find_styp(GLOBAL, C, CURRENT id) = $find_map(id, styp, C.GLOBAL.FRAME, id)
def $find_styp(BLOCK, C, CURRENT id) = styp
  -- if styp? = $find_map_opt(id, styp, C.BLOCK.FRAME, id)
def $find_styp(BLOCK, C, CURRENT id) = $find_styp(GLOBAL, C, CURRENT id)
  -- if eps = $find_map_opt(id, styp, C.BLOCK.FRAME, id)
def $find_styp(LOCAL, C, CURRENT id) = styp
  -- if styp? = $find_maps_opt(id, styp, C.LOCAL.FRAMES, id)
def $find_styp(LOCAL, C, CURRENT id) = $find_styp(BLOCK, C, CURRENT id)
  -- if eps = $find_maps_opt(id, styp, C.LOCAL.FRAMES, id)

;; Finder for values

def $find_val(cursor, tcontext, name) : val                                hint(show %2#%latex("@")#%1.FRAME`[%3])

def $find_val(p, C, name) = val
  -- if typ dir ctk val? = $find_styp(p, C, name)

;; Finder for type definitions

def $find_typdef(cursor, tcontext, name) : typdef                          hint(show %2#%latex("@")#%1.TDENV`[%3])

def $find_typdef(p, C, TOP id) = $find_map(tid, typdef, C.GLOBAL.TDENV, id)
def $find_typdef(GLOBAL, C, CURRENT id) = $find_map(tid, typdef, C.GLOBAL.TDENV, id)
def $find_typdef(BLOCK, C, CURRENT id) = td
  -- if td? = $find_map_opt(tid, typdef, C.BLOCK.TDENV, id)
def $find_typdef(BLOCK, C, CURRENT id) = $find_typdef(GLOBAL, C, CURRENT id)
  -- if eps = $find_map_opt(tid, typdef, C.BLOCK.TDENV, id)
def $find_typdef(LOCAL, C, CURRENT id) = td
  -- if td? = $find_map_opt(tid, typdef, C.LOCAL.TDENV, id)
def $find_typdef(LOCAL, C, CURRENT id) = $find_typdef(BLOCK, C, CURRENT id)
  -- if eps = $find_map_opt(tid, typdef, C.LOCAL.TDENV, id)

;; Finder for function definitions

def $to_fkey(argIL*) : (id?)*

def $to_fkey(eps) = eps
def $to_fkey(argIL_h argIL_t*) = id $to_fkey(argIL_t*)
  -- if NameA id exprIL? = argIL_h
def $to_fkey(argIL_h argIL_t*) = $to_fkey(argIL_t*)
  -- otherwise

def $find_funcdef(cursor, tcontext, name, argIL*) : (fid, funcdef, id*)    hint(show %2#%latex("@")#%1.FDENV`[%3#(%4)#%latex()])

def $find_funcdef(p, C, TOP id, argIL*) = $find_func(funcdef, id, $to_fkey(argIL*), C.GLOBAL.FDENV)
def $find_funcdef(GLOBAL, C, CURRENT id, argIL*) = $find_func(funcdef, id, $to_fkey(argIL*), C.GLOBAL.FDENV)
def $find_funcdef(BLOCK, C, CURRENT id, argIL*) = (fid, fd, id_deft*)
  -- if (fid, fd, id_deft*)? = $find_func_opt(funcdef, id, $to_fkey(argIL*), C.BLOCK.FDENV)
def $find_funcdef(BLOCK, C, CURRENT id, argIL*) = $find_funcdef(GLOBAL, C, CURRENT id, argIL*)
  -- if eps = $find_func_opt(funcdef, id, $to_fkey(argIL*), C.BLOCK.FDENV)
def $find_funcdef(LOCAL, C, CURRENT id, argIL*) = $find_funcdef(BLOCK, C, CURRENT id, argIL*)

;; Finder for constructor definitions

def $find_consdef(cursor, tcontext, name, argIL*) : (cid, consdef, id*)    hint(show %2#%latex("@")#%1.CDENV`[%3#(%4)#%latex()])

def $find_consdef(p, C, TOP id, argIL*) = $find_func(consdef, id, $to_fkey(argIL*), C.GLOBAL.CDENV)
def $find_consdef(GLOBAL, C, CURRENT id, argIL*) = $find_func(consdef, id, $to_fkey(argIL*), C.GLOBAL.CDENV)
def $find_consdef(BLOCK, C, CURRENT id, argIL*) = $find_consdef(GLOBAL, C, CURRENT id, argIL*)
def $find_consdef(LOCAL, C, CURRENT id, argIL*) = $find_consdef(BLOCK, C, CURRENT id, argIL*)
