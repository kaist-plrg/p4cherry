;;
;; Relations for type alpha-equivalence
;;

relation Type_alpha:
  typ ~~ typ
  hint(input %0 %1)

relation FuncType_alpha:
  functyp ~~ functyp
  hint(input %0 %1)

relation FuncDef_alpha:
  funcdef ~~ funcdef
  hint(input %0 %1)

;;
;; Alpha-equivalence of types
;;

rule Type_alpha/basetyp:
  basetyp ~~ basetyp

rule Type_alpha/vart:
  (VarT id) ~~ (VarT id)

rule Type_alpha/spect-nominal:
  (SpecT ptd_a typ_a*) ~~ (SpecT ptd_b typ_b*)
  ----
  -- if typ_a' = $specialize_typdef(ptd_a, typ_a*)
  -- if typ_b' = $specialize_typdef(ptd_b, typ_b*)
  ----
  -- Type_alpha: typ_a' ~~ typ_b'
  ----
  -- if $is_nominal(typ_a') /\ $is_nominal(typ_b')
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/spect-structural:
  (SpecT ptd_a typ_a*) ~~ (SpecT ptd_b typ_b*)
  ----
  -- if typ_a' = $specialize_typdef(ptd_a, typ_a*)
  -- if typ_b' = $specialize_typdef(ptd_b, typ_b*)
  ----
  -- Type_alpha: typ_a' ~~ typ_b'
  ----
  -- if ~$is_nominal(typ_a') /\ ~$is_nominal(typ_b')

rule Type_alpha/deft-left:
  (DefT typ_a) ~~ typ_b
  -- Type_alpha: typ_a ~~ typ_b

rule Type_alpha/deft-right:
  typ_a ~~ (DefT typ_b)
  -- Type_alpha: typ_a ~~ typ_b

rule Type_alpha/newt:
  (NewT id typ_a) ~~ (NewT id typ_b)
  -- Type_alpha: typ_a ~~ typ_b

rule Type_alpha/enumt:
  (EnumT id member*) ~~ (EnumT id member*)

rule Type_alpha/senumt:
  (SEnumT id typ_a (member, val_a)*) ~~ (SEnumT id typ_b (member, val_b)*)
  -- Type_alpha: typ_a ~~ typ_b
  -- if (val_a = val_b)*

rule Type_alpha/listt:
  (ListT typ_a) ~~ (ListT typ_b)
  -- Type_alpha: typ_a ~~ typ_b

rule Type_alpha/tuplet:
  (TupleT typ_a*) ~~ (TupleT typ_b*)
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/stackt:
  (StackT typ_a i_size) ~~ (StackT typ_b i_size)
  -- Type_alpha: typ_a ~~ typ_b

rule Type_alpha/structt:
  (StructT id (member, typ_a)*) ~~ (StructT id (member, typ_b)*)
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/headert:
  (HeaderT id (member, typ_a)*) ~~ (HeaderT id (member, typ_b)*)
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/uniont:
  (UnionT id (member, typ_a)*) ~~ (UnionT id (member, typ_b)*)
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/externt:
  (ExternT id fmap_a) ~~ (ExternT id fmap_b)
  ----
  -- if `{ (fid_a -> fd_a)* } = fmap_a
  -- if `{ (fid_b -> fd_b)* } = fmap_b
  ----
  -- if $eq_set<fid>(`{ fid_a* }, `{ fid_b* })
  -- if (fd_a' = $find_map<fid, funcdef>(fmap_a, fid_a))*
  -- if (fd_b' = $find_map<fid, funcdef>(fmap_b, fid_a))*
  -- (FuncDef_alpha: fd_a' ~~ fd_b')*

rule Type_alpha/parsert:
  (ParserT pt_a*) ~~ (ParserT pt_b*)
  -- if (_ dir_a typ_a _ = pt_a)*
  -- if (_ dir_b typ_b _ = pt_b)*
  ----
  -- if (dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/controlt:
  (ControlT pt_a*) ~~ (ControlT pt_b*)
  -- if (_ dir_a typ_a _ = pt_a)*
  -- if (_ dir_b typ_b _ = pt_b)*
  ----
  -- if (dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/packaget:
  (PackageT typ_a*) ~~ (PackageT typ_b*)
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/tablet:
  (TableT id typ_a) ~~ (TableT id typ_b)
  -- Type_alpha: typ_a ~~ typ_b

rule Type_alpha/defaultt:
  DefaultT ~~ DefaultT

rule Type_alpha/seqt:
  (SeqT typ_a*) ~~ (SeqT typ_b*)
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/seqdefaultt:
  (SeqDefaultT typ_a*) ~~ (SeqDefaultT typ_b*)
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/recordt:
  (RecordT (member, typ_a)*) ~~ (RecordT (member, typ_b)*)
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/recorddefaultt:
  (RecordDefaultT (member, typ_a)*) ~~ (RecordDefaultT (member, typ_b)*)
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/invalidt:
  InvalidT ~~ InvalidT

rule Type_alpha/sett:
  (SetT typ_a) ~~ (SetT typ_b)
  -- Type_alpha: typ_a ~~ typ_b

rule Type_alpha/statet:
  StateT ~~ StateT

rule Type_alpha/tableenumt:
  (TableEnumT id member*) ~~ (TableEnumT id member*)

rule Type_alpha/tablestructt:
  (TableStructT id (member, typ_a)*) ~~ (TableStructT id (member, typ_b)*)
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/anyt:
  AnyT ~~ AnyT

;;
;; Alpha-equivalence of function types
;;

rule FuncType_alpha/builtinmethodt:
  (BuiltinMethodT pt_a* typ_r_a) ~~ (BuiltinMethodT pt_b* typ_r_b)
  -- if (_ dir_a typ_a _ = pt_a)*
  -- if (_ dir_b typ_b _ = pt_b)*
  ----
  -- (if dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*
  -- (Type_alpha: typ_r_a ~~ typ_r_b)

rule FuncType_alpha/actiont:
  (ActionT pt_a*) ~~ (ActionT pt_b*)
  -- if (_ dir_a typ_a _ = pt_a)*
  -- if (_ dir_b typ_b _ = pt_b)*
  ----
  -- (if dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*

rule FuncType_alpha/parserapplymethodt:
  (ParserApplyMethodT pt_a*) ~~ (ParserApplyMethodT pt_b*)
  -- if (_ dir_a typ_a _ = pt_a)*
  -- if (_ dir_b typ_b _ = pt_b)*
  ----
  -- (if dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*

rule FuncType_alpha/controlapplymethodt:
  (ControlApplyMethodT pt_a*) ~~ (ControlApplyMethodT pt_b*)
  -- if (_ dir_a typ_a _ = pt_a)*
  -- if (_ dir_b typ_b _ = pt_b)*
  ----
  -- (if dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*

rule FuncType_alpha/tableapplymethodt:
  (TableApplyMethodT typ_a) ~~ (TableApplyMethodT typ_b)
  -- (Type_alpha: typ_a ~~ typ_b)

rule FuncType_alpha/externfunctiont:
  (ExternFuncT pt_a* typ_r_a) ~~ (ExternFuncT pt_b* typ_r_b)
  -- if (_ dir_a typ_a _ = pt_a)*
  -- if (_ dir_b typ_b _ = pt_b)*
  ----
  -- (if dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*
  -- (Type_alpha: typ_r_a ~~ typ_r_b)

rule FuncType_alpha/functiont:
  (FuncT pt_a* typ_r_a) ~~ (FuncT pt_b* typ_r_b)
  -- if (_ dir_a typ_a _ = pt_a)*
  -- if (_ dir_b typ_b _ = pt_b)*
  ----
  -- (if dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*
  -- (Type_alpha: typ_r_a ~~ typ_r_b)

rule FuncType_alpha/externmethodt:
  (ExternMethodT pt_a* typ_r_a) ~~ (ExternMethodT pt_b* typ_r_b)
  -- if (_ dir_a typ_a _ = pt_a)*
  -- if (_ dir_b typ_b _ = pt_b)*
  ----
  -- (if dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*
  -- (Type_alpha: typ_r_a ~~ typ_r_b)

rule FuncType_alpha/externabstractmethodt:
  (ExternAbstractMethodT pt_a* typ_r_a) ~~
  (ExternAbstractMethodT pt_b* typ_r_b)
  -- if (_ dir_a typ_a _ = pt_a)*
  -- if (_ dir_b typ_b _ = pt_b)*
  ----
  -- (if dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*
  -- (Type_alpha: typ_r_a ~~ typ_r_b)

;;
;; Alpha-equivalence of function definitions
;;

rule FuncDef_alpha/monofd:
  (MonoFD ft_a) ~~ (MonoFD ft_b)
  -- FuncType_alpha: ft_a ~~ ft_b

rule FuncDef_alpha/polyfd:
  (PolyFD (tparam_a*, tparam_hidden_a*) -> ft_a) ~~ (PolyFD (tparam_b*, tparam_hidden_b*) -> ft_b)
  -- if |tparam_a*| = |tparam_b*|
  -- if |tparam_hidden_a*| = |tparam_hidden_b*|
  ----
  -- if tid_fresh* = $fresh_tids(|tparam_a* ++ tparam_hidden_a*|)
  ----
  -- if tparam_a'* = tparam_a* ++ tparam_hidden_a*
  -- if ft_a' = $subst_functyp(`{ (tparam_a' -> (VarT tid_fresh))* }, ft_a)
  ----
  -- if tparam_b'* = tparam_b* ++ tparam_hidden_b*
  -- if ft_b' = $subst_functyp(`{ (tparam_b' -> (VarT tid_fresh))* }, ft_b)
  ----
  -- FuncType_alpha: ft_a' ~~ ft_b'
