;;
;; Explicit Casts
;;

rule Sub_expl:
  typ_a <: typ_b
  -- Sub_expl_canon: $canon_typ(typ_a) <: $canon_typ(typ_b)

rule Sub_expl_canon/eq:
  typ_a <: typ_b
  -- Type_alpha: typ_a ~~ typ_b

rule Sub_expl_canon/neq:
  typ_a <: typ_b
  -- Type_alpha:/ typ_a ~~ typ_b
  -- Sub_expl_canon_neq: typ_a <: typ_b

rule Sub_expl_canon_neq/fbitt-boolt:
  FBitT 1 <: BoolT

rule Sub_expl_canon_neq/boolt-fbitt:
  BoolT <: FBitT 1

rule Sub_expl_canon_neq/intt-boolt:
  IntT <: BoolT

rule Sub_expl_canon_neq/fintt-fbitt:
  FIntT width_a <: FBitT width_b

rule Sub_expl_canon_neq/fbitt-fintt:
  FBitT width_a <: FIntT width_b

rule Sub_expl_canon_neq/fbitt-fbitt:
  FBitT width_a <: FBitT width_b

rule Sub_expl_canon_neq/fintt-fintt:
  FIntT width_a <: FIntT width_b

rule Sub_expl_canon_neq/fbitt-intt:
  FBitT width <: IntT

rule Sub_expl_canon_neq/fintt-intt:
  FIntT width <: IntT

rule Sub_expl_canon_neq/intt-fbitt:
  IntT <: FBitT width

rule Sub_expl_canon_neq/intt-fintt:
  IntT <: FIntT width

rule Sub_expl_canon_neq/newt-innert:
  NewT _ typ_a <: typ_b
  -- Sub_impl: typ_a << typ_b

rule Sub_expl_canon_neq/innert-newt:
  typ_a <: NewT _ typ_b
  -- Sub_impl: typ_a << typ_b

rule Sub_expl_canon_neq/senumt-innert:
  SEnumT _ typ_a _ <: typ_b
  -- Sub_impl: typ_a << typ_b

rule Sub_expl_canon_neq/innert-senumt:
  typ_a <: SEnumT _ typ_b _
  -- Sub_impl: typ_a << typ_b

rule Sub_expl_canon_neq/seqt-list:
  SeqT typ_a* <: ListT typ_b
  -- (Sub_expl: typ_a <: typ_b)*

rule Sub_expl_canon_neq/seqt-tuplet:
  SeqT typ_a* <: TupleT typ_b*
  -- (Sub_expl: typ_a <: typ_b)*

rule Sub_expl_canon_neq/seqt-stackt:
  SeqT typ_a* <: StackT typ_b i_size
  -- if |typ_a*| <= i_size
  -- (Sub_expl: typ_a <: typ_b)*

rule Sub_expl_canon_neq/seqt-structt:
  SeqT typ_a* <: StructT _ (_, typ_b)*
  -- (Sub_expl: typ_a <: typ_b)*

rule Sub_expl_canon_neq/seqt-headert:
  SeqT typ_a* <: HeaderT _ (_, typ_b)*
  -- (Sub_expl: typ_a <: typ_b)*

rule Sub_expl_canon_neq/recordt-structt:
  RecordT (member_a, typ_a)* <: StructT _ (member_b, typ_b)*
  -- if $eq_set<member>(`{ member_a* }, `{ member_b* })
  ----
  -- if (typ_a' = $find_map<member, typ>(`{ (member_a -> typ_a)* }, member_a))*
  -- if (typ_b' = $find_map<member, typ>(`{ (member_b -> typ_b)* }, member_a))*
  -- (Sub_expl: typ_a' <: typ_b')*

rule Sub_expl_canon_neq/recordt-headert:
  RecordT (member_a, typ_a)* <: HeaderT _ (member_b, typ_b)*
  -- if $eq_set<member>(`{ member_a* }, `{ member_b* })
  ----
  -- if (typ_a' = $find_map<member, typ>(`{ (member_a -> typ_a)* }, member_a))*
  -- if (typ_b' = $find_map<member, typ>(`{ (member_b -> typ_b)* }, member_a))*
  -- (Sub_expl: typ_a' <: typ_b')*

rule Sub_expl_canon_neq/defaultt:
  DefaultT <: typ
  -- if $is_deftable(typ)

rule Sub_expl_canon_neq/seqdefaultt-tuplet:
  SeqDefaultT typ_a* <: TupleT typ_b*
  -- if |typ_a*| < |typ_b*|
  -- if (typ_c*, typ_d*) = $partition_<typ>(typ_b*, |typ_a*|)
  ----
  -- (Sub_expl: typ_a <: typ_c)*
  -- if ($is_deftable(typ_d))*

rule Sub_expl_canon_neq/seqdefaultt-stackt:
  SeqDefaultT typ_a* <: StackT typ_b i_size
  -- if |typ_a*| < i_size
  -- (Sub_expl: typ_a <: typ_b)*
  -- if $is_deftable(typ_b)

rule Sub_expl_canon_neq/seqdefaultt-structt:
  SeqDefaultT typ_a* <: StructT _ (_, typ_b)*
  -- if |typ_a*| < |typ_b*|
  -- if (typ_c*, typ_d*) = $partition_<typ>(typ_b*, |typ_a*|)
  ----
  -- (Sub_expl: typ_a <: typ_c)*
  -- if ($is_deftable(typ_d))*

rule Sub_expl_canon_neq/seqdefaultt-headert:
  SeqDefaultT typ_a* <: HeaderT _ (_, typ_b)*
  -- if |typ_a*| < |typ_b*|
  -- if (typ_c*, typ_d*) = $partition_<typ>(typ_b*, |typ_a*|)
  ----
  -- (Sub_expl: typ_a <: typ_c)*
  -- if ($is_deftable(typ_d))*

rule Sub_expl_canon_neq/recorddefaultt-structt:
  RecordDefaultT (member_a, typ_a)* <: StructT _ (member_b, typ_b)*
  -- if $sub_set<member>(`{ member_a* }, `{ member_b* })
  -- if `{ member_c* } = $diff_set<member>(`{ member_b* }, `{ member_a* })
  ----
  -- if (typ_a' = $find_map<member, typ>(`{ (member_a -> typ_a)* }, member_a))*
  -- if (typ_b' = $find_map<member, typ>(`{ (member_b -> typ_b)* }, member_a))*
  -- (Sub_expl: typ_a' <: typ_b')*
  ----
  -- if (typ_c' = $find_map<member, typ>(`{ (member_b -> typ_b)* }, member_a))*
  -- if ($is_deftable(typ_c'))*

rule Sub_expl_canon_neq/recorddefaultt-headert:
  RecordDefaultT (member_a, typ_a)* <: HeaderT _ (member_b, typ_b)*
  -- if $sub_set<member>(`{ member_a* }, `{ member_b* })
  -- if `{ member_c* } = $diff_set<member>(`{ member_b* }, `{ member_a* })
  ----
  -- if (typ_a' = $find_map<member, typ>(`{ (member_a -> typ_a)* }, member_a))*
  -- if (typ_b' = $find_map<member, typ>(`{ (member_b -> typ_b)* }, member_a))*
  -- (Sub_expl: typ_a' <: typ_b')*
  ----
  -- if (typ_c' = $find_map<member, typ>(`{ (member_b -> typ_b)* }, member_a))*
  -- if ($is_deftable(typ_c'))*

rule Sub_expl_canon_neq/invalidt-headert:
  InvalidT <: HeaderT _ _

rule Sub_expl_canon_neq/invalidt-uniont:
  InvalidT <: UnionT _ _

rule Sub_expl_canon_neq/sett-sett:
  SetT typ_a <: SetT typ_b
  -- Sub_expl: typ_a <: typ_b

rule Sub_expl_canon_neq/non-sett-sett:
  typ_a <: SetT typ_b
  -- Sub_expl: typ_a <: typ_b

;;
;; Implicit Casts
;;

rule Sub_impl:
  typ_a << typ_b
  -- Sub_impl_canon: $canon_typ(typ_a) << $canon_typ(typ_b)

rule Sub_impl_canon/eq:
  typ_a << typ_b
  -- Type_alpha: typ_a ~~ typ_b

rule Sub_impl_canon/neq:
  typ_a << typ_b
  -- Type_alpha:/ typ_a ~~ typ_b
  -- Sub_impl_canon_neq: typ_a << typ_b

rule Sub_impl_canon_neq/intt-fbitt:
  IntT << FBitT _

rule Sub_impl_canon_neq/intt-fintt:
  IntT << FIntT _ 

rule Sub_impl_canon_neq/senumt-innert:
  SEnumT _ typ_a _ << typ_b
  -- Sub_impl: typ_a << typ_b

rule Sub_impl_canon_neq/seqt-list:
  SeqT typ_a* << ListT typ_b
  -- (Sub_impl: typ_a << typ_b)*

rule Sub_impl_canon_neq/seqt-tuplet:
  SeqT typ_a* << TupleT typ_b*
  -- (Sub_impl: typ_a << typ_b)*

rule Sub_impl_canon_neq/seqt-stackt:
  SeqT typ_a* << StackT typ_b i_size
  -- if |typ_a*| <= i_size
  -- (Sub_impl: typ_a << typ_b)*

rule Sub_impl_canon_neq/seqt-structt:
  SeqT typ_a* << StructT _ (_, typ_b)*
  -- (Sub_impl: typ_a << typ_b)*

rule Sub_impl_canon_neq/seqt-headert:
  SeqT typ_a* << HeaderT _ (_, typ_b)*
  -- (Sub_impl: typ_a << typ_b)*

rule Sub_impl_canon_neq/seqt-seqt:
  SeqT typ_a* << SeqT typ_b*
  -- (Sub_impl: typ_a << typ_b)*

rule Sub_impl_canon_neq/recordt-structt:
  RecordT (member_a, typ_a)* << StructT _ (member_b, typ_b)*
  -- if $eq_set<member>(`{ member_a* }, `{ member_b* })
  ----
  -- if (typ_a' = $find_map<member, typ>(`{ (member_a -> typ_a)* }, member_a))*
  -- if (typ_b' = $find_map<member, typ>(`{ (member_b -> typ_b)* }, member_a))*
  -- (Sub_impl: typ_a' << typ_b')*

rule Sub_impl_canon_neq/recordt-headert:
  RecordT (member_a, typ_a)* << HeaderT _ (member_b, typ_b)*
  -- if $eq_set<member>(`{ member_a* }, `{ member_b* })
  ----
  -- if (typ_a' = $find_map<member, typ>(`{ (member_a -> typ_a)* }, member_a))*
  -- if (typ_b' = $find_map<member, typ>(`{ (member_b -> typ_b)* }, member_a))*
  -- (Sub_impl: typ_a' << typ_b')*

rule Sub_impl_canon_neq/defaultt:
  DefaultT << typ
  -- if $is_deftable(typ)

rule Sub_impl_canon_neq/seqdefaultt-tuplet:
  SeqDefaultT typ_a* << TupleT typ_b*
  -- if |typ_a*| < |typ_b*|
  -- if (typ_c*, typ_d*) = $partition_<typ>(typ_b*, |typ_a*|)
  ----
  -- (Sub_impl: typ_a << typ_c)*
  -- if ($is_deftable(typ_d))*

rule Sub_impl_canon_neq/seqdefaultt-stackt:
  SeqDefaultT typ_a* << StackT typ_b i_size
  -- if |typ_a*| < i_size
  -- (Sub_impl: typ_a << typ_b)*
  -- if $is_deftable(typ_b)

rule Sub_impl_canon_neq/seqdefaultt-structt:
  SeqDefaultT typ_a* << StructT _ (_, typ_b)*
  -- if |typ_a*| < |typ_b*|
  -- if (typ_c*, typ_d*) = $partition_<typ>(typ_b*, |typ_a*|)
  ----
  -- (Sub_impl: typ_a << typ_c)*
  -- if ($is_deftable(typ_d))*

rule Sub_impl_canon_neq/seqdefaultt-headert:
  SeqDefaultT typ_a* << HeaderT _ (_, typ_b)*
  -- if |typ_a*| < |typ_b*|
  -- if (typ_c*, typ_d*) = $partition_<typ>(typ_b*, |typ_a*|)
  ----
  -- (Sub_impl: typ_a << typ_c)*
  -- if ($is_deftable(typ_d))*

rule Sub_impl_canon_neq/recorddefaultt-structt:
  RecordDefaultT (member_a, typ_a)* << StructT _ (member_b, typ_b)*
  -- if $sub_set<member>(`{ member_a* }, `{ member_b* })
  -- if `{ member_c* } = $diff_set<member>(`{ member_b* }, `{ member_a* })
  ----
  -- if (typ_a' = $find_map<member, typ>(`{ (member_a -> typ_a)* }, member_a))*
  -- if (typ_b' = $find_map<member, typ>(`{ (member_b -> typ_b)* }, member_a))*
  -- (Sub_impl: typ_a' << typ_b')*
  ----
  -- if (typ_c' = $find_map<member, typ>(`{ (member_b -> typ_b)* }, member_c))*
  -- if ($is_deftable(typ_c'))*

rule Sub_impl_canon_neq/recorddefaultt-headert:
  RecordDefaultT (member_a, typ_a)* << HeaderT id (member_b, typ_b)*
  -- if $sub_set<member>(`{ member_a* }, `{ member_b* })
  -- if `{ member_c* } = $diff_set<member>(`{ member_b* }, `{ member_a* })
  ----
  -- if (typ_a' = $find_map<member, typ>(`{ (member_a -> typ_a)* }, member_a))*
  -- if (typ_b' = $find_map<member, typ>(`{ (member_b -> typ_b)* }, member_a))*
  -- (Sub_impl: typ_a' << typ_b')*
  ----
  -- if (typ_c' = $find_map<member, typ>(`{ (member_b -> typ_b)* }, member_c))*
  -- if ($is_deftable(typ_c'))*

rule Sub_impl_canon_neq/invalidt-headert:
  InvalidT << HeaderT _ _

rule Sub_impl_canon_neq/invalidt-uniont:
  InvalidT << UnionT _ _

;;
;; Coercions
;;

dec $reduce_senum_unary(exprIL, def $check_unary(typ) : bool) : exprIL
    hint(show REDUCE %1 UNDER %2)

def $reduce_senum_unary(exprIL, def $check_unary) = exprIL
  -- if `(typ; _) = $annot(exprIL)
  -- if $check_unary(typ)

def $reduce_senum_unary(exprIL, def $check_unary) = exprIL''
  -- if `(typ; ctk) = $annot(exprIL)
  -- if ~$check_unary(typ)
  -- if SEnumT _ typ' _ = typ
  -- if exprIL' = CastE typ' exprIL `(typ'; ctk)
  -- if exprIL'' = $reduce_senum_unary(exprIL', def $check_unary)


dec $reduce_senums_binary(exprIL, exprIL, def $check_binary(typ, typ) : bool) : (exprIL, exprIL)
    hint(show REDUCE %1 AND %2 UNDER %3)

def $reduce_senums_binary(exprIL_a, exprIL_b, def $check_binary) = (exprIL_a, exprIL_b)
  -- if `(typ_a; _) = $annot(exprIL_a)
  -- if `(typ_b; _) = $annot(exprIL_b)
  -- if $check_binary(typ_a, typ_b)

def $reduce_senums_binary(exprIL_a, exprIL_b, def $check_binary) = (exprIL_a'', exprIL_b'')
  -- if `(typ_a; ctk_a) = $annot(exprIL_a)
  -- if `(typ_b; _) = $annot(exprIL_b)
  -- if ~$check_binary(typ_a, typ_b)
  -- if SEnumT _ typ_a' _ = typ_a
  -- if exprIL_a' = CastE typ_a' exprIL_a `(typ_a'; ctk_a)
  -- if (exprIL_a'', exprIL_b'') = $reduce_senums_binary(exprIL_a', exprIL_b, def $check_binary)

def $reduce_senums_binary(exprIL_a, exprIL_b, def $check_binary) = (exprIL_a'', exprIL_b'')
  -- if `(typ_a; _) = $annot(exprIL_a)
  -- if `(typ_b; ctk_b) = $annot(exprIL_b)
  -- if ~$check_binary(typ_a, typ_b)
  -- if SEnumT _ typ_b' _ = typ_b
  -- if exprIL_b' = CastE typ_b' exprIL_b `(typ_b'; ctk_b)
  -- if (exprIL_a'', exprIL_b'') = $reduce_senums_binary(exprIL_a, exprIL_b', def $check_binary)


;; (TODO) This should better be a relation
dec $coerce_binary(exprIL, exprIL) : (exprIL, exprIL)
    hint(show COERCE %1 AND %2)

def $coerce_binary(exprIL_a, exprIL_b) = (exprIL_a, exprIL_b)
  -- if `(typ_a; _) = $annot(exprIL_a)
  -- if `(typ_b; _) = $annot(exprIL_b)
  -- Type_alpha: typ_a ~~ typ_b

def $coerce_binary(exprIL_a, exprIL_b) = (exprIL_a', exprIL_b)
  -- if `(typ_a; ctk_a) = $annot(exprIL_a)
  -- if `(typ_b; _) = $annot(exprIL_b)
  -- Type_alpha:/ typ_a ~~ typ_b
  -- Sub_impl: typ_a << typ_b
  -- if exprIL_a' = CastE typ_b exprIL_a `(typ_b; ctk_a)

def $coerce_binary(exprIL_a, exprIL_b) = (exprIL_a, exprIL_b')
  -- if `(typ_a; _) = $annot(exprIL_a)
  -- if `(typ_b; ctk_b) = $annot(exprIL_b)
  -- Type_alpha:/ typ_a ~~ typ_b
  -- Sub_impl:/ typ_a << typ_b
  -- Sub_impl: typ_b << typ_a
  -- if exprIL_b' = CastE typ_a exprIL_b `(typ_a; ctk_b)


dec $coerce_assign(exprIL, typ) : exprIL
    hint(show COERCE %1 to %2)

def $coerce_assign(exprIL, typ_t) = exprIL
  -- if `(typ_f; _) = $annot(exprIL)
  -- Type_alpha: typ_f ~~ typ_t

def $coerce_assign(exprIL, typ_t) = CastE typ_t exprIL `(typ_t; ctk_f)
  -- if `(typ_f; ctk_f) = $annot(exprIL)
  -- Type_alpha:/ typ_f ~~ typ_t
  -- Sub_impl: typ_f << typ_t
