;;
;; Table context
;;

syntax mode =
  | NOPRI
  | NOPRILPM nat
  | PRI
  | PRILPM

syntax priority =
  { VALUES int*,
    INIT bool,
    DELTA int,
    LARGEST_WINS bool }

syntax entry =
  { SIZE int,
    CONST bool }

var prt : priority
var ent : entry

syntax key = (typ, matchkind)
syntax action = (name, paramtyp*, argIL*)

syntax tblctx =
  { KEYS key*,
    ACTIONS action*,
    PRIORITIES priority,
    ENTRIES entry,
    MODE mode }

;;
;; State per table entry
;;

syntax tblstate =
  | LPM nat
  | NOLPM

;;
;; Constructors
;;

dec $empty_pt(): priority
def $empty_pt() =
  { VALUES eps,
    INIT false,
    DELTA 1,
    LARGEST_WINS true }

dec $empty_et(): entry
def $empty_et() =
  { SIZE 0,
    CONST true }

dec $empty_tblctx(): tblctx
def $empty_tblctx() =
  { KEYS eps,
    ACTIONS eps,
    PRIORITIES $empty_pt(),
    ENTRIES $empty_et(),
    MODE NOPRI }

;;
;; Adders
;;

dec $add_key(key, tblctx) : tblctx

def $add_key(key, tblctx) = tblctx[ .KEYS = tblctx.KEYS ++ [ key ] ]

dec $add_action(action, tblctx) : tblctx

def $add_action(action, tblctx) = tblctx[ .ACTIONS = tblctx.ACTIONS ++ [ action ] ]

dec $add_priority(int, tblctx) : tblctx

def $add_priority(i, tblctx)
  = tblctx[ .PRIORITIES.VALUES = tblctx.PRIORITIES.VALUES ++ [ i ] ]

;;
;; Getters
;;

dec $get_lpm_prefix(val) : tblstate
dec $get_lpm_prefix'(val, nat) : nat

def $get_lpm_prefix(val) = LPM $get_lpm_prefix'(val, 0)
def $get_lpm_prefix'(FBitV 0 _, n_prefix) = n_prefix
def $get_lpm_prefix'(FBitV w n, n_prefix)
  = $get_lpm_prefix'(val', $(n_prefix + 1))
  -- if $(w > 0)
  -- if $(n \ 2 =/= 0)
  -- if val' = FBitV $(w - 1) $((n - 1) / 2)
def $get_lpm_prefix'(FBitV w n, 0)
  = $get_lpm_prefix'(val', 0)
  -- if $(w > 0)
  -- if $(n \ 2 = 0)
  -- if val' = FBitV $(w - 1) $(n / 2)

;;
;; Updaters
;;

dec $update_mode(text, typ, tblctx) : tblctx

def $update_mode("lpm", typ, tblctx) = tblctx[ .MODE = NOPRILPM w ]
  -- if tblctx.MODE = NOPRI
  -- if w = $get_width(typ)
def $update_mode("lpm", _, tblctx) = tblctx[ .MODE = PRILPM ]
  -- if tblctx.MODE = PRI
def $update_mode("range", _, tblctx) = tblctx[ .MODE = PRI ]
  -- if tblctx.MODE = NOPRI
def $update_mode("ternary", _, tblctx) = tblctx[ .MODE = PRI ]
  -- if tblctx.MODE = NOPRI
def $update_mode("optional", _, tblctx) = tblctx[ .MODE = PRI ]
  -- if tblctx.MODE = NOPRI
def $update_mode("range", _, tblctx) = tblctx[ .MODE = PRILPM ]
  -- if tblctx.MODE = NOPRILPM _
def $update_mode("ternary", _, tblctx) = tblctx[ .MODE = PRILPM ]
  -- if tblctx.MODE = NOPRILPM _
def $update_mode("optional", _, tblctx) = tblctx[ .MODE = PRILPM ]
  -- if tblctx.MODE = NOPRILPM _
def $update_mode(_, _, tblctx) = tblctx
  -- otherwise

dec $update_state(tblstate, tblstate) : tblstate

def $update_state(NOLPM, LPM nat) = LPM nat
def $update_state(LPM nat, NOLPM) = LPM nat
def $update_state(NOLPM, NOLPM) = NOLPM

;;
;; Finders
;;

dec $find_action(tblctx, name) : (paramtyp*, argIL*)?

def $find_action(tblctx, name)
  = $assoc_<name, (paramtyp*, argIL*)>(name, (name_a, (pt_a*, argIL_a*))*)
  -- if (name_a, pt_a*, argIL_a*)* = tblctx.ACTIONS

dec $find_last_priority(tblctx) : int

def $find_last_priority(tblctx) = i_pri*[|i_pri*| - 1]
  -- if i_pri* = tblctx.PRIORITIES.VALUES

;;
;; Helpers
;;

dec $keys_of_table(tbl) : tblkeyprop*

def $keys_of_table(eps) = eps
def $keys_of_table((KeyP tblkeyprop) :: tblprop_t*) = tblkeyprop :: $keys_of_table(tblprop_t*)
def $keys_of_table(tblprop_h :: tblprop_t*) = $keys_of_table(tblprop_t*)
  -- otherwise

dec $actions_of_table(tbl) : tblactionprop*

def $actions_of_table(eps) = eps
def $actions_of_table((ActionP tblactionprop) :: tblprop_t*) = tblactionprop :: $actions_of_table(tblprop_t*)
def $actions_of_table(tblprop_h :: tblprop_t*) = $actions_of_table(tblprop_t*)
  -- otherwise
