;;
;; Relations for well-formedness
;;

relation Type_wf       : tidset |- typ
relation TypeDef_wf    : tidset |- typdef

relation ParamType_wf  : tidset |- paramtyp
relation ParamTypes_wf : tidset |- paramtyp*

relation FuncType_wf   : tidset |- functyp
relation FuncDef_wf    : tidset |- funcdef

syntax consctxt hint(show %latex("\\texttt{c}")) = CONSCTXT
relation CParamType_wf : tidset consctxt |- paramtyp
relation CParamTypes_wf: tidset consctxt |- paramtyp*

relation ConsType_wf   : tidset |- constyp
relation ConsDef_wf    : tidset |- consdef

;;
;; Well-formedness of types
;;

rule Type_wf/baset:
  tidset |- basetyp

rule Type_wf/vart:
  tidset |- VarT tid
  -- if $in_set<tid>(tid, tidset)

rule Type_wf/spect:
  tidset |- SpecT ptd typ_a*
  -- if typ = $specialize_typdef(ptd, typ_a*)
  -- Type_wf: tidset |- typ

dec $nestable_deft(typ) : bool
dec $nestable'_deft(typ) : bool

def $nestable_deft(typ) = $nestable'_deft($canon_typ(typ))
def $nestable'_deft(basetyp) = ~$is_voidt(basetyp) /\ ~$is_matchkindt(basetyp)
def $nestable'_deft(VarT _) = true
def $nestable'_deft(datatyp) = true
def $nestable'_deft(typ) = false
  -- otherwise

rule Type_wf/deft:
  tidset |- DefT typ
  -- if $nestable_deft(typ)
  -- Type_wf: tidset |- typ

dec $nestable_newt(typ) : bool
dec $nestable'_newt(typ) : bool

def $nestable_newt(typ) = $nestable'_newt($canon_typ(typ))
def $nestable'_newt(BoolT) = true
def $nestable'_newt(FIntT _) = true
def $nestable'_newt(FBitT _) = true
def $nestable'_newt(VarT _) = true
def $nestable'_newt(NewT _ _) = true
def $nestable'_newt(typ) = false
  -- otherwise

rule Type_wf/newt:
  tidset |- NewT _ typ
  -- if $nestable_newt(typ)
  -- Type_wf: tidset |- typ

rule Type_wf/enumt:
  tidset |- EnumT _ member*
  -- if $distinct_<member>(member*)

dec $nestable_senumt(typ) : bool
dec $nestable'_senumt(typ) : bool
dec $nestable_newt_in_senumt(typ) : bool
dec $nestable_newt_in_senumt'(typ) : bool

def $nestable_senumt(typ) = $nestable'_senumt($canon_typ(typ))
def $nestable'_senumt(FIntT _) = true
def $nestable'_senumt(FBitT _) = true
def $nestable'_senumt(VarT _) = true
def $nestable'_senumt(NewT _ typ) = $nestable_newt_in_senumt(typ)
def $nestable'_senumt(typ) = false
  -- otherwise

def $nestable_newt_in_senumt(typ) = $nestable_newt_in_senumt'($canon_typ(typ))
def $nestable_newt_in_senumt'(FIntT _) = true
def $nestable_newt_in_senumt'(FBitT _) = true
def $nestable_newt_in_senumt'(VarT _) = true
def $nestable_newt_in_senumt'(NewT _ _) = true
def $nestable_newt_in_senumt'(typ) = false
  -- otherwise

rule Type_wf/senumt:
  tidset |- SEnumT _ typ (member, val)*
  -- if $distinct_<member>(member*)
  -- if $nestable_senumt(typ)
  -- Type_wf: tidset |- typ

dec $nestable_listt(typ) : bool
dec $nestable'_listt(typ) : bool

def $nestable_listt(typ) = $nestable'_listt($canon_typ(typ))
def $nestable'_listt(basetyp) = ~$is_voidt(basetyp)
def $nestable'_listt(VarT _) = true
def $nestable'_listt(datatyp) = true
def $nestable'_listt(typ) = false -- otherwise

rule Type_wf/listt:
  tidset |- ListT typ
  -- if $nestable_listt(typ)
  -- Type_wf: tidset |- typ

dec $nestable_tuplet(typ) : bool
dec $nestable'_tuplet(typ) : bool

def $nestable_tuplet(typ) = $nestable'_tuplet($canon_typ(typ))
def $nestable'_tuplet(ErrT) = true
def $nestable'_tuplet(BoolT) = true
def $nestable'_tuplet(numtyp) = ~$is_intt(numtyp)
def $nestable'_tuplet(VarT _) = true
def $nestable'_tuplet(datatyp) = ~$is_listt(datatyp)
def $nestable'_tuplet(typ) = false
  -- otherwise

rule Type_wf/tuplet:
  tidset |- TupleT typ*
  -- if $nestable_tuplet(typ)*
  -- (Type_wf: tidset |- typ)*

dec $nestable_stackt(typ) : bool
dec $nestable'_stackt(typ) : bool

def $nestable_stackt(typ) = $nestable'_stackt($canon_typ(typ))
def $nestable'_stackt(VarT tid) = true
def $nestable'_stackt(HeaderT _ _) = true
def $nestable'_stackt(UnionT _ _) = true
def $nestable'_stackt(typ) = false
  -- otherwise

rule Type_wf/stackt:
  tidset |- StackT typ i_size
  -- if i_size >= 0
  -- if $nestable_stackt(typ)
  -- Type_wf: tidset |- typ

dec $nestable_structt(typ) : bool
dec $nestable'_structt(typ) : bool

def $nestable_structt(typ) = $nestable'_structt($canon_typ(typ))
def $nestable'_structt(ErrT) = true
def $nestable'_structt(BoolT) = true
def $nestable'_structt(numtyp) = ~$is_intt(numtyp)
def $nestable'_structt(VarT _) = true
def $nestable'_structt(datatyp) = ~$is_listt(datatyp)
def $nestable'_structt(typ) = false
  -- otherwise

rule Type_wf/structt:
  tidset |- StructT _ (member, typ)*
  -- if $distinct_<member>(member*)
  -- if $nestable_structt(typ)*
  -- (Type_wf: tidset |- typ)*

dec $nestable_headert(typ) : bool
dec $nestable'_headert(typ) : bool
dec $nestable_structt_in_headert(typ) : bool
dec $nestable'_structt_in_headert(typ) : bool

def $nestable_headert(typ) = $nestable'_headert($canon_typ(typ))
def $nestable'_headert(BoolT) = true
def $nestable'_headert(numtyp) = ~$is_intt(numtyp)
def $nestable'_headert(VarT _) = true
def $nestable'_headert(NewT _ _) = true
def $nestable'_headert(SEnumT _ _ _) = true
def $nestable'_headert(StructT _ (_, typ)*) = true
  -- if $nestable_structt_in_headert(typ)*
def $nestable'_headert(typ) = false
  -- otherwise

def $nestable_structt_in_headert(typ) = $nestable'_structt_in_headert($canon_typ(typ))
def $nestable'_structt_in_headert(BoolT) = true
def $nestable'_structt_in_headert(FIntT _) = true
def $nestable'_structt_in_headert(FBitT _) = true
def $nestable'_structt_in_headert(VarT _) = true
def $nestable'_structt_in_headert(NewT _ _) = true
def $nestable'_structt_in_headert(SEnumT _ _ _) = true
def $nestable'_structt_in_headert(StructT _ (_, typ)*) = true
  -- if $nestable_structt_in_headert(typ)*
def $nestable'_structt_in_headert(typ) = false
  -- otherwise

rule Type_wf/headert:
  tidset |- HeaderT _ (member, typ)*
  -- if $distinct_<member>(member*)
  -- if $nestable_headert(typ)*
  -- (Type_wf: tidset |- typ)*

dec $nestable_uniont(typ) : bool
dec $nestable'_uniont(typ) : bool

def $nestable_uniont(typ) = $nestable'_uniont($canon_typ(typ))
def $nestable'_uniont(VarT _) = true
def $nestable'_uniont(NewT _ _) = true
def $nestable'_uniont(HeaderT _ _) = true
def $nestable'_uniont(typ) = false
  -- otherwise

rule Type_wf/uniont:
  tidset |- UnionT _ (member, typ)*
  -- if $distinct_<member>(member*)
  -- if $nestable_uniont(typ)*
  -- (Type_wf: tidset |- typ)*

rule Type_wf/externt:
  tidset |- ExternT _ fmap
  -- if MAP (PAIR fid funcdef)* = fmap
  -- (FuncDef_wf: tidset |- funcdef)*

rule Type_wf/parsert:
  tidset |- ParserT pt*
  -- ParamTypes_wf: tidset |- pt*

rule Type_wf/controlt:
  tidset |- ControlT pt*
  -- ParamTypes_wf: tidset |- pt*

rule Type_wf/packaget:
  tidset |- PackageT typ*
  -- (Type_wf: tidset |- typ)*

rule Type_wf/tablet:
  tidset |- TableT _ typ
  -- if typ' = $canon_typ(typ)
  -- if $is_table_structt(typ')
  -- Type_wf: tidset |- typ

rule Type_wf/defaultt:
  tidset |- DefaultT

rule Type_wf/seqt:
  tidset |- SeqT typ*
  -- (Type_wf: tidset |- typ)*

rule Type_wf/seqdefaultt:
  tidset |- SeqDefaultT typ*
  -- (Type_wf: tidset |- typ)*

rule Type_wf/recordt:
  tidset |- RecordT (member, typ)*
  -- if $distinct_<member>(member*)
  -- (Type_wf: tidset |- typ)*

rule Type_wf/recorddefaultt:
  tidset |- RecordDefaultT (member, typ)*
  -- if $distinct_<member>(member*)
  -- (Type_wf: tidset |- typ)*

rule Type_wf/invalidt:
  tidset |- InvalidT

dec $nestable_sett(typ) : bool
dec $nestable'_sett(typ) : bool
dec $nestable_tuplet_in_sett(typ) : bool
dec $nestable'_tuplet_in_sett(typ) : bool
dec $nestable_seqt_in_sett(typ) : bool
dec $nestable'_seqt_in_sett(typ) : bool

def $nestable_sett(typ) = $nestable'_sett($canon_typ(typ))
def $nestable'_sett(ErrT) = true
def $nestable'_sett(BoolT) = true
def $nestable'_sett(FIntT _) = true
def $nestable'_sett(FBitT _) = true
def $nestable'_sett(VarT _) = true
def $nestable'_sett(NewT _ _) = true
def $nestable'_sett(EnumT _ _) = true
def $nestable'_sett(SEnumT _ _ _) = true
def $nestable'_sett(TupleT typ*) = true
  -- if $nestable_tuplet_in_sett(typ)*
def $nestable'_sett(SeqT typ*) = true
  -- if $nestable_seqt_in_sett(typ)*
def $nestable'_sett(typ) = false
  -- otherwise

def $nestable_tuplet_in_sett(typ) = $nestable'_tuplet_in_sett($canon_typ(typ))
def $nestable'_tuplet_in_sett(BoolT) = true
def $nestable'_tuplet_in_sett(FIntT _) = true
def $nestable'_tuplet_in_sett(FBitT _) = true
def $nestable'_tuplet_in_sett(VarT _) = true
def $nestable'_tuplet_in_sett(NewT _ _) = true
def $nestable'_tuplet_in_sett(EnumT _ _) = true
def $nestable'_tuplet_in_sett(SEnumT _ _ _) = true
def $nestable'_tuplet_in_sett(TupleT typ*) = true
  -- if $nestable_tuplet_in_sett(typ)*
def $nestable'_tuplet_in_sett(typ) = false
  -- otherwise

def $nestable_seqt_in_sett(typ) = $nestable'_seqt_in_sett($canon_typ(typ))
def $nestable'_seqt_in_sett(BoolT) = true
def $nestable'_seqt_in_sett(FIntT _) = true
def $nestable'_seqt_in_sett(FBitT _) = true
def $nestable'_seqt_in_sett(VarT _) = true
def $nestable'_seqt_in_sett(NewT _ _) = true
def $nestable'_seqt_in_sett(EnumT _ _) = true
def $nestable'_seqt_in_sett(SEnumT _ _ _) = true
def $nestable'_seqt_in_sett(TupleT typ*) = true
  -- if $nestable_seqt_in_sett(typ)*
def $nestable'_seqt_in_sett(SeqT typ*) = true
  -- if $nestable_seqt_in_sett(typ)*
def $nestable'_seqt_in_sett(typ) = false
  -- otherwise

rule Type_wf/sett:
  tidset |- SetT typ
  -- if typ' = $canon_typ(typ)
  -- if $nestable_sett(typ)
  -- Type_wf: tidset |- typ

rule Type_wf/statet:
  tidset |- StateT

rule Type_wf/tableenumt:
  tidset |- TableEnumT _ member*
  -- if $distinct_<member>(member*)

rule Type_wf/tablestructt:
  tidset |- TableStructT _ (member, typ)*
  -- if member* = [ "hit", "miss", "action_run" ]
  -- if typ* = [ BoolT, BoolT, (TableEnumT id_e member_e*) ]
  -- Type_wf: tidset |- TableEnumT id_e member_e*

rule Type_wf/anyt:
  tidset |- AnyT

;;
;; Well-formedness of type definitions
;;

dec $nestable_monod(typ) : bool

def $nestable_monod(VarT _) = true
def $nestable_monod(DefT _) = true
def $nestable_monod(NewT _ _) = true
def $nestable_monod(EnumT _ _) = true
def $nestable_monod(SEnumT _ _ _) = true
def $nestable_monod(TableT _ _) = true
def $nestable_monod(typ) = false
  -- otherwise

rule TypeDef_wf/monod:
  tidset |- MonoD typ
  -- if $nestable_monod(typ)
  -- Type_wf: tidset |- typ

dec $nestable_polyd(typ) : bool

def $nestable_polyd(TupleT _) = true
def $nestable_polyd(StackT _ _) = true
def $nestable_polyd(StructT _ _) = true
def $nestable_polyd(HeaderT _ _) = true
def $nestable_polyd(UnionT _ _) = true
def $nestable_polyd(ExternT _ _) = true
def $nestable_polyd(ParserT _) = true
def $nestable_polyd(ControlT _) = true
def $nestable_polyd(PackageT _) = true
def $nestable_polyd(typ) = false
  -- otherwise

rule TypeDef_wf/polyd:
  tidset |- PolyD (tparam*, tparam_hidden*) -> typ
  -- if $nestable_polyd(typ)
  -- if $distinct_<tid>(tparam* ++ tparam_hidden*)
  -- if tidset' = $union_set<tid>(tidset, SET (tparam* ++ tparam_hidden*))
  -- Type_wf: tidset' |- typ

;;
;; Well-formedness of paramter types
;;

rule ParamType_wf/none:
  tidset |- _ dir typ eps
  -- Type_wf: tidset |- typ
  -- if $is_externt($canon_typ(typ)) => (dir = NO)

rule ParamType_wf/some:
  tidset |- _ dir typ val
  -- Type_wf: tidset |- typ
  -- if $is_externt($canon_typ(typ)) => (dir = NO)
  -- if dir = IN \/ dir = NO

rule ParamTypes_wf:
  tidset |- pt*
  -- if (id _ _ _ = pt)*
  -- if $distinct_<id>(id*)
  -- (ParamType_wf: tidset |- pt)*

;;
;; Well-formedness of function types
;;

rule FuncType_wf/builtinmethodt:
  tidset |- BuiltinMethodT pt* typ_r
  -- ParamTypes_wf: tidset |- pt*
  -- Type_wf: tidset |- typ_r

dec $is_trailing_action(dir*) : bool
    hint(show % IS TRAILING ACTION_T)
dec $is_trailing_action'(bool, dir*) : bool

def $is_trailing_action(dir*) = $is_trailing_action'(true, $rev_<dir>(dir*))
def $is_trailing_action'(_, eps) = true
def $is_trailing_action'(true, NO :: dir_t*) = $is_trailing_action'(true, dir_t*)
def $is_trailing_action'(false, NO :: dir_t*) = false
def $is_trailing_action'(_, dir_h :: dir_t*) = $is_trailing_action'(false, dir_t*)
  -- if dir_h =/= NO

rule FuncType_wf/actiont:
  tidset |- ActionT pt*
  -- ParamTypes_wf: tidset |- pt*
  -- if (id dir typ val? = pt)*
  -- if $is_trailing_action(dir*)
  -- if (typ' = $canon_typ(typ))*
  ----
  -- if (~$is_deft(typ') /\ ~$is_spect(typ') /\ ~$is_intt(typ')
         /\ ~$is_obj(typ')
         /\ (~$is_strt(typ') \/ (dir = NO)))*

rule FuncType_wf/parserapplymethodt:
  tidset |- ParserApplyMethodT pt*
  -- ParamTypes_wf: tidset |- pt*
  -- if (id dir typ val? = pt)*
  -- if (typ' = $canon_typ(typ))*
  ----
  -- if (~$is_deft(typ') /\ ~$is_spect(typ')
         /\ ~($is_obj(typ') /\ ~$is_externt(typ'))
         /\ (~($is_strt(typ') \/ $is_intt(typ'))
             \/ (dir = NO)))*

rule FuncType_wf/controlapplymethodt:
  tidset |- ControlApplyMethodT pt*
  -- ParamTypes_wf: tidset |- pt*
  -- if (id dir typ val? = pt)*
  -- if (typ' = $canon_typ(typ))*
  ----
  ;;-- if (~$is_deft(typ') /\ ~$is_spect(typ')
  ;;       /\ ~($is_obj(typ') /\ ~$is_externt(typ'))
  ;;       /\ (~($is_strt(typ') \/ $is_intt(typ'))
  ;;           \/ (dir = NO)))*

rule FuncType_wf/tableapplymethodt:
  tidset |- TableApplyMethodT (TableStructT _ _)

rule FuncType_wf/externfunctiont:
  tidset |- ExternFuncT pt* typ_r
  -- ParamTypes_wf: tidset |- pt*
  -- if (id dir typ val? = pt)*
  -- if (typ' = $canon_typ(typ))*
  ----
  -- if (~$is_deft(typ') /\ ~$is_spect(typ')
         /\ ~($is_obj(typ') /\ ~$is_externt(typ'))
         /\ (~($is_strt(typ') \/ $is_intt(typ'))
             \/ (dir = NO)))*
  ----
  -- Type_wf: tidset |- typ_r

rule FuncType_wf/functiont:
  tidset |- FuncT pt* typ_r
  -- ParamTypes_wf: tidset |- pt*
  -- if (id dir typ val? = pt)*
  -- if (typ' = $canon_typ(typ))*
  ----
  -- if (~$is_deft(typ') /\ ~$is_spect(typ') /\ ~$is_obj(typ')
         /\ (~($is_strt(typ') \/ $is_intt(typ'))
             \/ (dir = NO)))*
  ----
  -- Type_wf: tidset |- typ_r

rule FuncType_wf/externmethodt:
  tidset |- ExternMethodT pt* typ_r
  -- ParamTypes_wf: tidset |- pt*
  -- if (id dir typ val? = pt)*
  -- if (typ' = $canon_typ(typ))*
  ----
  -- if (~$is_deft(typ') /\ ~$is_spect(typ')
         /\ ~($is_obj(typ') /\ ~$is_externt(typ'))
         /\ (~($is_strt(typ') \/ $is_intt(typ'))
             \/ (dir = NO)))*
  ----
  -- Type_wf: tidset |- typ_r

rule FuncType_wf/externabstractmethodt:
  tidset |- ExternAbstractMethodT pt* typ_r
  -- ParamTypes_wf: tidset |- pt*
  -- if (id dir typ val? = pt)*
  -- if (typ' = $canon_typ(typ))*
  ----
  -- if (~$is_deft(typ') /\ ~$is_spect(typ')
         /\ ~($is_obj(typ') /\ ~$is_externt(typ'))
         /\ (~($is_strt(typ') \/ $is_intt(typ'))
             \/ (dir = NO)))*
  ----
  -- Type_wf: tidset |- typ_r

;;
;; Well-formedness of function definitions
;;

rule FuncDef_wf/monofd:
  tidset |- MonoFD ft
  -- if $is_builtinmethodt(ft)
        \/ $is_actiont(ft)
        \/ $is_parserapplymethodt(ft)
        \/ $is_controlapplymethodt(ft)
        \/ $is_tableapplymethodt(ft)
  ----
  -- FuncType_wf: tidset |- ft

rule FuncDef_wf/polyfd:
  tidset |- PolyFD (tparam*, tparam_hidden*) -> ft
  -- if $is_externfunct(ft)
        \/ $is_funct(ft)
        \/ $is_externmethodt(ft)
        \/ $is_externabstractmethodt(ft)
  ----
  -- if $distinct_<tid>(tparam* ++ tparam_hidden*)
  -- if tidset' = $union_set<tid>(tidset, SET (tparam* ++ tparam_hidden*))
  -- FuncType_wf: tidset' |- ft

;;
;; Well-formedness of constructor paramter types
;;

rule CParamType_wf:
  tidset consctxt |- id NO typ val?
  -- Type_wf: tidset |- typ

rule CParamTypes_wf:
  tidset consctxt |- pt*
  -- if (id _ _ _ = pt)*
  -- if $distinct_<id>(id*)
  -- (CParamType_wf: tidset consctxt |- pt)*

;;
;; Well-formedness of constructor types
;;

rule ConsType_wf/externt:
  tidset |- ConsT pt* typ
  -- CParamTypes_wf: tidset CONSCTXT |- pt*
  -- Type_wf: tidset |- typ
  -- if ExternT id fmap = $canon_typ(typ)
  ----
  -- if (_ _ typ_p _ = pt)*
  -- if (typ' = $canon_typ(typ_p))*
  ----
  -- if (~$is_deft(typ') /\ ~$is_spect(typ')
         /\ ~($is_obj(typ') /\ ~$is_externt(typ')))*

rule ConsType_wf/parsert:
  tidset |- ConsT pt* typ
  -- CParamTypes_wf: tidset CONSCTXT |- pt*
  -- Type_wf: tidset |- typ
  -- if ParserT _ = $canon_typ(typ)
  ----
  -- if (_ _ typ_p _ = pt)*
  -- if (typ_p' = $canon_typ(typ_p))*
  ----
  -- if (~$is_deft(typ_p') /\ ~$is_spect(typ_p')
         /\ ~$is_controlt(typ_p') /\ ~$is_packaget(typ_p') /\ ~$is_tablet(typ_p'))*

rule ConsType_wf/controlt:
  tidset |- ConsT pt* typ
  -- CParamTypes_wf: tidset CONSCTXT |- pt*
  -- Type_wf: tidset |- typ
  -- if ControlT _ = $canon_typ(typ)
  ----
  -- if (_ _ typ_p _ = pt)*
  -- if (typ_p' = $canon_typ(typ_p))*
  ----
  -- if (~$is_deft(typ_p') /\ ~$is_spect(typ_p')
         /\ ~$is_parsert(typ_p') /\ ~$is_packaget(typ_p') /\ ~$is_tablet(typ_p'))*

rule ConsType_wf/packaget:
  tidset |- ConsT pt* typ
  -- CParamTypes_wf: tidset CONSCTXT |- pt*
  -- Type_wf: tidset |- typ
  -- if PackageT _ = $canon_typ(typ)
  ----
  -- if (_ _ typ_p _ = pt)*
  -- if (typ_p' = $canon_typ(typ_p))*
  ----
  -- if (~$is_deft(typ_p') /\ ~$is_spect(typ_p') /\ ~$is_tablet(typ_p'))*

;;
;; Well-formedness of constructor definitions
;;

rule ConsDef_wf:
  tidset |- ConsD (tparam*, tparam_hidden*) -> constyp
  -- if ConsT _ typ_r = constyp
  -- if typ_r' = $canon_typ(typ_r)
  ----
  -- if $is_externt(typ_r')
        \/ $is_parsert(typ_r')
        \/ $is_controlt(typ_r')
        \/ $is_packaget(typ_r')
  ----
  -- if $distinct_<tid>(tparam* ++ tparam_hidden*)
  -- if tidset' = $union_set<tid>(tidset, SET (tparam* ++ tparam_hidden*))
  -- ConsType_wf: tidset' |- constyp
