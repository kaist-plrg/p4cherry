;;
;; Empty statement
;;

rule Stmt_ok/emptys:
  p C f |- EmptyS : C f EmptyS

;;
;; Assignment statement
;;

def $assignable(typ) : bool     hint(show % IS ASSIGNABLE)
def $assignable'(typ) : bool

def $assignable(typ) = $assignable'($canon_typ(typ))

def $assignable'(VoidT) = false
def $assignable'(objtyp) = false
def $assignable'(synthtyp) = false
def $assignable'(typ) = true
  -- otherwise

rule Lval_ok/namee:
  p C |- NameE name
  -- if typ dir ctk val? = $find_styp(p, C, name)
  -- if dir = OUT \/ dir = INOUT
  -- if $assignable(typ)

rule Lval_ok/arracce:
  p C |- ArrAccE exprIL_b exprIL_i
  -- Lval_ok: p C |- exprIL_b

rule Lval_ok/bitacce:
  p C |- BitAccE exprIL_b val_l val_h
  -- Lval_ok: p C |- exprIL_b

rule Lval_ok/expracce:
  p C |- ExprAccE exprIL_b member
  -- Lval_ok: p C |- exprIL_b

rule Stmt_ok/assigns:
  p C f |- AssignS expr_l expr_r : C f (AssignS exprIL_l exprIL_r')
  -- Expr_ok: p C |- expr_l : exprIL_l typ_l DYN
  -- Lval_ok: p C |- exprIL_l
  ----
  -- Expr_ok: p C |- expr_r : exprIL_r typ_r ctk_r
  ----
  -- if exprIL_r' = $coerce_assign((exprIL_r, typ_r), typ_l)

;;
;; Switch statement
;; (TODO-Jaehyun) check for duplicate label and non-last default label
;;

relation Switch_tbl_label_ok:
  cursor tcontext id |- switchlabel : switchlabelIL

rule Switch_tbl_label_ok/exprl:
  p C id_t |- ExprL (NameE (CURRENT id_a)) : ExprL (NameE (CURRENT id_a))
  -- if id_e = $concat_text("action\\_list(" id_t ")")
  -- if id = $concat_text(id_e "." id_a)
  -- if TableEnumFieldV id_e id_a = $find_val(p, C, CURRENT id)

rule Switch_tbl_label_ok/defaultl:
  p C id_t |- DefaultL : DefaultL


relation Switch_tbl_case_ok:
  cursor tcontext flow id |- switchcase : flow switchcaseIL

rule Switch_tbl_case_ok/matchc:
  p C f id_t |- MatchC switchlabel block : f' (MatchC switchlabelIL blockIL)
  -- Switch_tbl_label_ok: p C id_t |- switchlabel : switchlabelIL
  -- Block_ok: p C f NOINIT |- block : C' f' blockIL

rule Switch_tbl_case_ok/fallc:
  p C f id_t |- FallC switchlabel : f (FallC switchlabelIL)
  -- Switch_tbl_label_ok: p C id_t |- switchlabel : switchlabelIL


relation Switch_tbl_cases_ok:
  cursor tcontext flow id |- switchcase* : flow switchcaseIL*

rule Switch_tbl_cases_ok/empty:
  p C f id_t |- eps : f eps

rule Switch_tbl_cases_ok/seq:
  p C f id_t |- switchcase_h switchcase_t* : f'' (switchcaseIL_h switchcaseIL_t*)
  -- Switch_tbl_case_ok: p C f id_t |- switchcase_h : f' switchcaseIL_h
  -- Switch_tbl_cases_ok: p C f' id_t |- switchcase_t* : f'' switchcaseIL_t*


rule Stmt_ok/switchs-tbl:
  p C f |- SwitchS expr switchcase* : C f' (SwitchS exprIL switchcaseIL*)
  -- Expr_ok: p C |- expr : exprIL (TableEnumT id member) ctk
  -- if id = $concat_text("action\\_list(" id_t ")")
  -- Switch_tbl_cases_ok: p C f id_t |- switchcase* : f' switchcaseIL*


relation Switch_gen_label_ok:
  cursor tcontext typ |- switchlabel : switchlabelIL

rule Switch_gen_label_ok/exprl:
  p C typ_s |- ExprL expr : ExprL exprIL'
  -- Expr_ok: p C |- expr : exprIL typ LCTK
  -- if exprIL' = $coerce_assign((exprIL, typ), typ_s)

rule Switch_gen_label_ok/defaultl:
  p C typ_s |- DefaultL : DefaultL


relation Switch_gen_case_ok:
  cursor tcontext flow typ |- switchcase : flow switchcaseIL

rule Switch_gen_case_ok/matchc:
  p C f typ_s |- MatchC switchlabel block : f' (MatchC switchlabelIL blockIL)
  -- Switch_gen_label_ok: p C typ_s |- switchlabel : switchlabelIL
  -- Block_ok: p C f NOINIT |- block : C' f' blockIL

rule Switch_gen_case_ok/fallc:
  p C f typ_s |- FallC switchlabel : f (FallC switchlabelIL)
  -- Switch_gen_label_ok: p C typ_s |- switchlabel : switchlabelIL


relation Switch_gen_cases_ok:
  cursor tcontext flow typ |- switchcase* : flow switchcaseIL*

rule Switch_gen_cases_ok/empty:
  p C f typ_s |- eps : f eps

rule Switch_gen_cases_ok/seq:
  p C f typ_s |- switchcase_h switchcase_t* : f'' (switchcaseIL_h switchcaseIL_t*)
  -- Switch_gen_case_ok: p C f typ_s |- switchcase_h : f' switchcaseIL_h
  -- Switch_gen_cases_ok: p C f' typ_s |- switchcase_t* : f'' switchcaseIL_t*


rule Stmt_ok/switchs-gen:
  p C f |- SwitchS expr switchcase* : C f' (SwitchS exprIL switchcaseIL*)
  -- Expr_ok: p C |- expr : exprIL typ ctk
  ----
  -- if typ' = $canon_typ(typ)
  -- (if typ' = ErrT \/ typ' = FIntT w \/ typ' = FBitT w \/ typ' = EnumT id member* \/ typ' = SEnumT id typ' (member, val)*)
  ----
  -- Switch_gen_cases_ok: p C f typ |- switchcase* : f' switchcaseIL*

;;
;; If statement
;;

rule Stmt_ok/ifs:
  p C f |- IfS expr_c stmt_t stmt_f : C f' (IfS exprIL_c stmtIL_t stmtIL_f)
  -- Expr_ok: p C |- expr_c : exprIL_c BoolT ctk_c
  -- Stmt_ok: p C f |- stmt_t : C_t f_t stmtIL_t
  -- Stmt_ok: p C f |- stmt_f : C_f f_f stmtIL_f
  -- if f' = $join_flow(f_t, f_f)

;;
;; Block statement
;;

rule Block_ok/init:
  LOCAL C f INIT |- BlockB stmt* : C' f' (BlockB stmtIL*)
  -- Stmts_ok: p C f |- stmt* : C' f' stmtIL*

rule Block_ok/noinit:
  LOCAL C f NOINIT |- BlockB stmt* : C''' f' (BlockB stmtIL*)
  -- if C' = $enter(C)
  -- Stmts_ok: p C' f |- stmt* : C'' f' stmtIL*
  -- if C''' = $exit(C'')

rule Stmt_ok/blocks:
  LOCAL C f |- BlockS block : C' f' (BlockS blockIL)
  -- Block_ok: LOCAL C f NOINIT |- block : C' f' blockIL

;;
;; Exit statement
;;

rule Stmt_ok/exits:
  p C f |- ExitS : C f ExitS

;;
;; Return statement
;;

rule Stmt_ok/rets-none:
  LOCAL C f |- RetS eps : C RET (RetS eps)
  -- if VoidT = $get_typ_ret(C.LOCAL.KIND)

rule Stmt_ok/rets-some:
  LOCAL C f |- RetS expr : C RET (RetS exprIL')
  -- Expr_ok: p C |- expr : exprIL typ ctk
  -- if typ_r = $get_typ_ret(C.LOCAL.KIND)
  ----
  -- if exprIL' = $coerce_assign((exprIL, typ), typ_r)

;;
;; Function call statement
;;

rule Stmt_ok/callfuncs:
  p C f |- CallFuncS name targ* arg* : C f (CallFuncS name targIL'* argIL'*)
  -- (Arg_ok: p C |- arg : argIL typ_arg)*
  ----
  -- (Type_ok: p C |- targ : targIL tid_fresh_a*)*
  -- if tid_fresh* = $concat_(tid, tid_fresh_a**)
  ----
  -- FuncType_ok: p C |- name targIL* argIL* : functyp tid_fresh_inserted* id_deft*
  ----
  -- if tid_fresh'* = $concat_(tid, tid_fresh* tid_fresh_inserted*)
  ----
  -- Call_ok: p C |- functyp targIL* (argIL, typ_arg)* id_deft* : typ targIL'* argIL'*

;;
;; Method call statement
;;

rule Stmt_ok/callmethods:
  p C f |- CallMethodS expr_b member targ* arg* : C f (CallMethodS exprIL_b member targIL'* argIL'*)
  -- (Arg_ok: p C |- arg : argIL typ_arg)*
  ----
  -- (Type_ok: p C |- targ : targIL tid_fresh_a*)*
  -- if tid_fresh* = $concat_(tid, tid_fresh_a**)
  ----
  -- MethodType_ok: p C |- expr_b member targIL* argIL* : functyp exprIL_b tid_fresh_inserted* id_deft*
  ----
  -- if tid_fresh'* = $concat_(tid, tid_fresh* tid_fresh_inserted*)
  ----
  -- Call_ok: p C |- functyp targIL* (argIL, typ_arg)* id_deft* : typ targIL'* argIL'*

;;
;; Instantiation statement
;;

rule Stmt_ok/callinsts:
  p C f |- CallInstS name targ* arg* : C f (CallInstS typ name targIL'* argIL'*)
  -- ConsType_ok: p C |- name eps eps : constyp eps eps
  ----
  -- Inst_ok: p C |- constyp eps eps eps : typ eps eps
  ----
  -- if typ' = $canon_typ(typ)
  -- if (typ' = ParserT paramtyp*) \/ (typ' = ControlT paramtyp*)
  ----
  -- if (TOP id = name) \/ (CURRENT id = name)
  -- if C' = $add_styp(p, C, id, typ NO CTK eps)
  ----
  -- Stmt_ok: p C' f |- CallMethodS (NameE (CURRENT id)) "apply" targ* arg* : C' f' stmtIL

;;
;; Transition statement
;;

rule Stmt_ok/transs:
  p C f |- TransS expr : C f (TransS exprIL)
  -- Expr_ok: p C |- expr : exprIL StateT ctk

;;
;; Declaration statement
;;

rule Stmt_ok/decls:
  p C f |- DeclS decl : C' f (DeclS declIL)
  -- Decl_ok: p C |- decl : C' declIL

;;
;; Statement sequence
;;

rule Stmts_ok/nil:
  p C f |- eps : C f eps

rule Stmts_ok/cons:
  p C f |- stmt_h stmt_t* : C'' f'' (stmtIL_h stmtIL_t*)
  -- Stmt_ok: p C f |- stmt_h : C' f' stmtIL_h
  -- Stmts_ok: p C' f' |- stmt_t* : C'' f'' stmtIL_t*
