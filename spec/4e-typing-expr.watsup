;;
;; Boolean expression
;;

rule Expr_ok/boole:
  p C |- BoolE b : ValueE (BoolV b) `(BoolT; LCTK)

;;
;; String expression
;;

rule Expr_ok/stre:
  p C |- StrE t : ValueE (StrV t) `(StrT; LCTK)

;;
;; Number expression
;;

rule Expr_ok/nume-intt:
  p C |- NumE (INT i) : ValueE (IntV i) `(IntT; LCTK)

rule Expr_ok/nume-fintt:
  p C |- NumE (FINT w i) : ValueE (FIntV w bs) `(FIntT w; LCTK)
  -- if bs = $to_bitstr(w, i)

rule Expr_ok/nume-fbitt:
  p C |- NumE (FBIT w i) : ValueE (FBitV w bs) `(FBitT w; LCTK)
  -- if bs = $to_bitstr(w, i)

;;
;; Variable expression
;;

rule Expr_ok/namee:
  p C |- NameE name : NameE name `(typ; ctk)
  -- if typ _ ctk _ = $find_styp(p, C, name)

;;
;; Sequence expression
;;

rule Expr_ok/seqe:
  p C |- SeqE expr* : SeqE exprIL* `(SeqT typ*; ctk_e)
  -- (Expr_ok: p C |- expr : exprIL)*
  -- if (`(typ; ctk) = $annot(exprIL))*
  -- if ctk_e = $joins_ctk(ctk*)

rule Expr_ok/seqdefaulte:
  p C |- SeqDefaultE expr* : SeqDefaultE exprIL* `(SeqDefaultT typ*; ctk_e)
  -- (Expr_ok: p C |- expr : exprIL)*
  -- if (`(typ; ctk) = $annot(exprIL))*
  -- if ctk_e = $joins_ctk(ctk*)

;;
;; Record expression
;;

rule Expr_ok/recorde:
  p C |- RecordE (member, expr)* : RecordE (member, exprIL)* `(RecordT (member, typ)*; ctk_e)
  -- (Expr_ok: p C |- expr : exprIL)*
  -- if (`(typ; ctk) = $annot(exprIL))*
  -- if ctk_e = $joins_ctk(ctk*)

rule Expr_ok/recorddefaulte:
  p C |- RecordDefaultE (member, expr)* : RecordE (member, exprIL)* `(RecordDefaultT (member, typ)*; ctk_e)
  -- (Expr_ok: p C |- expr : exprIL)*
  -- if (`(typ; ctk) = $annot(exprIL))*
  -- if ctk_e = $joins_ctk(ctk*)

;;
;; Default expression
;;

rule Expr_ok/defaulte:
  p C |- DefaultE : DefaultE `(DefaultT; LCTK)

;;
;; Invalid expression
;;

rule Expr_ok/invalide:
  p C |- InvalidE : ValueE InvalidV `(InvalidT; LCTK)

;;
;; Unary expression
;;

dec $compatible_bnot(typ) : bool
dec $compatible'_bnot(typ) : bool

def $compatible_bnot(typ) = $compatible'_bnot($canon_typ(typ))
def $compatible'_bnot(FIntT _) = true
def $compatible'_bnot(FBitT _) = true
def $compatible'_bnot(typ) = false
  -- otherwise

rule Expr_ok/une-bnot:
  p C |- UnE BNOT expr : UnE BNOT exprIL_e `(typ_e; ctk_e)
  -- Expr_ok: p C |- expr : exprIL
  -- if exprIL_e = $reduce_senum_unary(exprIL, def $compatible_bnot)
  -- if `(typ_e; ctk_e) = $annot(exprIL_e)

dec $compatible_lnot(typ) : bool
dec $compatible'_lnot(typ) : bool

def $compatible_lnot(typ) = $compatible'_lnot($canon_typ(typ))
def $compatible'_lnot(BoolT) = true
def $compatible'_lnot(typ) = false
  --otherwise

rule Expr_ok/une-lnot:
  p C |- UnE LNOT expr : UnE LNOT exprIL_e `(typ_e; ctk_e)
  -- Expr_ok: p C |- expr : exprIL
  -- if exprIL_e = $reduce_senum_unary(exprIL, def $compatible_lnot)
  -- if `(typ_e; ctk_e) = $annot(exprIL_e)

dec $compatible_uplus(typ) : bool
dec $compatible'_uplus(typ) : bool

def $compatible_uplus(typ) = $compatible'_uplus($canon_typ(typ))
def $compatible'_uplus(IntT) = true
def $compatible'_uplus(FIntT _) = true
def $compatible'_uplus(FBitT _) = true
def $compatible'_uplus(typ) = false
  -- otherwise

rule Expr_ok/une-uplus:
  p C |- UnE UPLUS expr : UnE UPLUS exprIL_e `(typ_e; ctk_e)
  -- Expr_ok: p C |- expr : exprIL
  -- if exprIL_e = $reduce_senum_unary(exprIL, def $compatible_uplus)
  -- if `(typ_e; ctk_e) = $annot(exprIL_e)

dec $compatible_uminus(typ) : bool
dec $compatible'_uminus(typ) : bool

def $compatible_uminus(typ) = $compatible'_uminus($canon_typ(typ))
def $compatible'_uminus(IntT) = true
def $compatible'_uminus(FIntT _) = true
def $compatible'_uminus(FBitT _) = true
def $compatible'_uminus(typ) = false
  -- otherwise

rule Expr_ok/une-uminus:
  p C |- UnE UMINUS expr : UnE UMINUS exprIL_e `(typ_e; ctk_e)
  -- Expr_ok: p C |- expr : exprIL
  -- if exprIL_e = $reduce_senum_unary(exprIL, def $compatible_uminus)
  -- if `(typ_e; ctk_e) = $annot(exprIL_e)

;;
;; Binary expression
;;

dec $compatible_plusminusmult(typ, typ) : bool
dec $compatible'_plusminusmult(typ, typ) : bool

def $compatible_plusminusmult(typ_l, typ_r)
  = $compatible'_plusminusmult($canon_typ(typ_l), $canon_typ(typ_r))
def $compatible'_plusminusmult(IntT, IntT) = true
def $compatible'_plusminusmult(FIntT w, FIntT w) = true
def $compatible'_plusminusmult(FBitT w, FBitT w) = true
def $compatible'_plusminusmult(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/bine-plus-minus-mult:
  p C |- BinE binop expr_l expr_r : BinE binop exprIL_l'' exprIL_r'' `(typ''; ctk)
  -- if $in_set<binop>(binop, SET ([ PLUS, MINUS, MUL ]))
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l
  -- Expr_ok: p C |- expr_r : exprIL_r
  ----
  -- if (exprIL_l', exprIL_r') = $coerce_binary(exprIL_l, exprIL_r)
  ----
  -- if (exprIL_l'', exprIL_r'') = $reduce_senums_binary(exprIL_l', exprIL_r', def $compatible_plusminusmult)
  ----
  -- if `(typ''; ctk_l'') = $annot(exprIL_l'')
  -- if `(_; ctk_r'') = $annot(exprIL_r'')
  -- if ctk = $join_ctk(ctk_l'', ctk_r'')

dec $compatible_satplusminus(typ, typ) : bool
dec $compatible'_satplusminus(typ, typ) : bool

def $compatible_satplusminus(typ_l, typ_r)
  = $compatible'_satplusminus($canon_typ(typ_l), $canon_typ(typ_r))
def $compatible'_satplusminus(FIntT w, FIntT w) = true
def $compatible'_satplusminus(FBitT w, FBitT w) = true
def $compatible'_satplusminus(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/bine-sat-plus-minus:
  p C |- BinE binop expr_l expr_r : BinE binop exprIL_l'' exprIL_r'' `(typ''; ctk)
  -- if $in_set<binop>(binop, SET ([ SPLUS, SMINUS ]))
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l
  -- Expr_ok: p C |- expr_r : exprIL_r
  ----
  -- if (exprIL_l', exprIL_r') = $coerce_binary(exprIL_l, exprIL_r)
  ----
  -- if (exprIL_l'', exprIL_r'') = $reduce_senums_binary(exprIL_l', exprIL_r', def $compatible_satplusminus)
  -- if `(typ''; ctk_l'') = $annot(exprIL_l'')
  -- if `(_; ctk_r'') = $annot(exprIL_r'')
  ----
  -- if ctk = $join_ctk(ctk_l'', ctk_r'')

dec $compatible_divmod(typ, typ) : bool
dec $compatible'_divmod(typ, typ) : bool

def $compatible_divmod(typ_l, typ_r)
  = $compatible'_divmod($canon_typ(typ_l), $canon_typ(typ_r))
def $compatible'_divmod(IntT, IntT) = true
def $compatible'_divmod(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/bine-div-mod-lctk:
  p C |- BinE binop expr_l expr_r : BinE binop exprIL_l'' exprIL_r'' `(typ''; ctk)
  -- if $in_set<binop>(binop, SET ([ DIV, MOD ]))
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l
  -- Expr_ok: p C |- expr_r : exprIL_r
  ----
  -- if (exprIL_l', exprIL_r') = $coerce_binary(exprIL_l, exprIL_r)
  ----
  -- if (exprIL_l'', exprIL_r'') = $reduce_senums_binary(exprIL_l', exprIL_r', def $compatible_divmod)
  ----
  -- if `(typ''; ctk_l'') = $annot(exprIL_l'')
  -- if `(_; LCTK) = $annot(exprIL_r'')
  ----
  -- Eval_static: p C |- exprIL_r'' ~> val_r
  -- if n_r = $get_num(val_r)
  -- if $(n_r > 0)
  ----
  -- if ctk = $join_ctk(ctk_l'', LCTK)

rule Expr_ok/bine-div-mod-non-lctk:
  p C |- BinE binop expr_l expr_r : BinE binop exprIL_l'' exprIL_r'' `(typ''; ctk)
  -- if $in_set<binop>(binop, SET ([ DIV, MOD ]))
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l
  -- Expr_ok: p C |- expr_r : exprIL_r
  ----
  -- if (exprIL_l', exprIL_r') = $coerce_binary(exprIL_l, exprIL_r)
  ----
  -- if (exprIL_l'', exprIL_r'') = $reduce_senums_binary(exprIL_l', exprIL_r', def $compatible_divmod)
  ----
  -- if `(typ''; ctk_l'') = $annot(exprIL_l'')
  -- if `(_; ctk_r'') = $annot(exprIL_r'')
  -- if ctk_r'' =/= LCTK
  -- if ctk = $join_ctk(ctk_l'', ctk_r'')

dec $compatible_shift(typ, typ) : bool
dec $compatible'_shift(typ, typ) : bool

def $compatible_shift(typ_l, typ_r)
  = $compatible'_shift($canon_typ(typ_l), $canon_typ(typ_r))
def $compatible'_shift(IntT, IntT) = true
def $compatible'_shift(IntT, FIntT _) = true
def $compatible'_shift(IntT, FBitT _) = true
def $compatible'_shift(FIntT _, IntT) = true
def $compatible'_shift(FIntT _, FIntT _) = true
def $compatible'_shift(FIntT _, FBitT _) = true
def $compatible'_shift(FBitT _, IntT) = true
def $compatible'_shift(FBitT _, FIntT _) = true
def $compatible'_shift(FBitT _, FBitT _) = true
def $compatible'_shift(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/bine-shift:
  p C |- BinE binop expr_l expr_r : BinE binop exprIL_l' exprIL_r' `(typ_l'; ctk)
  -- if $in_set<binop>(binop, SET ([ SHL, SHR ]))
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l
  -- Expr_ok: p C |- expr_r : exprIL_r
  ----
  -- if (exprIL_l', exprIL_r') = $reduce_senums_binary(exprIL_l, exprIL_r, def $compatible_shift)
  -- if `(typ_l'; ctk_l') = $annot(exprIL_l')
  -- if `(typ_r'; ctk_r') = $annot(exprIL_r')
  ----
  -- if ($is_fintt(typ_r') \/ $is_intt(typ_r')) => (ctk_r' = LCTK)
  ----
  -- if ctk = $join_ctk(ctk_l', ctk_r')

rule Expr_ok/bine-compare-eq:
  p C |- BinE binop expr_l expr_r : BinE binop exprIL_l' exprIL_r' `(BoolT; ctk)
  -- if $in_set<binop>(binop, SET ([ EQ, NE ]))
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l
  -- Expr_ok: p C |- expr_r : exprIL_r
  ----
  -- if (exprIL_l', exprIL_r') = $coerce_binary(exprIL_l, exprIL_r)
  ----
  -- if `(typ'; ctk_l') = $annot(exprIL_l')
  -- if `(_; ctk_r') = $annot(exprIL_r')
  -- if $is_equalable(typ')
  ----
  -- if ctk = $join_ctk(ctk_l', ctk_r')

dec $compatible_compare(typ, typ) : bool
dec $compatible'_compare(typ, typ) : bool

def $compatible_compare(typ_l, typ_r)
  = $compatible'_compare($canon_typ(typ_l), $canon_typ(typ_r))
def $compatible'_compare(IntT, IntT) = true
def $compatible'_compare(FIntT w, FIntT w) = true
def $compatible'_compare(FBitT w, FBitT w) = true
def $compatible'_compare(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/bine-compare:
  p C |- BinE binop expr_l expr_r : BinE binop exprIL_l'' exprIL_r'' `(BoolT; ctk)
  -- if $in_set<binop>(binop, SET ([ LE, GE, LT, GT ]))
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l
  -- Expr_ok: p C |- expr_r : exprIL_r
  ----
  -- if (exprIL_l', exprIL_r') = $coerce_binary(exprIL_l, exprIL_r)
  ----
  -- if (exprIL_l'', exprIL_r'') = $reduce_senums_binary(exprIL_l', exprIL_r', def $compatible_compare)
  ----
  -- if `(_; ctk_l'') = $annot(exprIL_l'')
  -- if `(_; ctk_r'') = $annot(exprIL_r'')
  -- if ctk = $join_ctk(ctk_l'', ctk_r'')

dec $compatible_bitwise(typ, typ) : bool
dec $compatible'_bitwise(typ, typ) : bool

def $compatible_bitwise(typ_l, typ_r)
  = $compatible'_bitwise($canon_typ(typ_l), $canon_typ(typ_r))
def $compatible'_bitwise(FIntT w, FIntT w) = true
def $compatible'_bitwise(FBitT w, FBitT w) = true
def $compatible'_bitwise(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/bine-bitwise:
  p C |- BinE binop expr_l expr_r : BinE binop exprIL_l'' exprIL_r'' `(typ''; ctk)
  -- if $in_set<binop>(binop, SET ([ BAND, BXOR, BOR ]))
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l
  -- Expr_ok: p C |- expr_r : exprIL_r
  ----
  -- if (exprIL_l', exprIL_r') = $coerce_binary(exprIL_l, exprIL_r)
  ----
  -- if (exprIL_l'', exprIL_r'') = $reduce_senums_binary(exprIL_l', exprIL_r', def $compatible_bitwise)
  ----
  -- if `(typ''; ctk_l'') = $annot(exprIL_l'')
  -- if `(_; ctk_r'') = $annot(exprIL_r'')
  -- if ctk = $join_ctk(ctk_l'', ctk_r'')

dec $compatible_concat(typ, typ) : bool
dec $compatible'_concat(typ, typ) : bool

def $compatible_concat(typ_l, typ_r)
  = $compatible'_concat($canon_typ(typ_l), $canon_typ(typ_r))
def $compatible'_concat(FIntT _, FIntT _) = true
def $compatible'_concat(FIntT _, FBitT _) = true
def $compatible'_concat(FBitT _, FIntT _) = true
def $compatible'_concat(FBitT _, FBitT _) = true
def $compatible'_concat(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/bine-concat-fint:
  p C |- BinE CONCAT expr_l expr_r : BinE CONCAT exprIL_l' exprIL_r' `(typ''; ctk)
  -- Expr_ok: p C |- expr_l : exprIL_l
  -- Expr_ok: p C |- expr_r : exprIL_r
  ----
  -- if (exprIL_l', exprIL_r') = $reduce_senums_binary(exprIL_l, exprIL_r, def $compatible_concat)
  ----
  -- if `(typ_l'; ctk_l') = $annot(exprIL_l')
  -- if `(typ_r'; ctk_r') = $annot(exprIL_r')
  ----
  -- if w = $($get_width(typ_l') + $get_width(typ_r'))
  -- if $is_fintt(typ_l')
  -- if typ'' = FIntT w
  ----
  -- if ctk = $join_ctk(ctk_l', ctk_r')

rule Expr_ok/bine-concat-fbit:
  p C |- BinE CONCAT expr_l expr_r : BinE CONCAT exprIL_l' exprIL_r' `(typ''; ctk)
  -- Expr_ok: p C |- expr_l : exprIL_l
  -- Expr_ok: p C |- expr_r : exprIL_r
  ----
  -- if (exprIL_l', exprIL_r') = $reduce_senums_binary(exprIL_l, exprIL_r, def $compatible_concat)
  ----
  -- if `(typ_l'; ctk_l') = $annot(exprIL_l')
  -- if `(typ_r'; ctk_r') = $annot(exprIL_r')
  ----
  -- if w = $($get_width(typ_l') + $get_width(typ_r'))
  -- if $is_fbitt(typ_l')
  -- if typ'' = FBitT w
  ----
  -- if ctk = $join_ctk(ctk_l', ctk_r')

dec $compatible_logical(typ, typ) : bool
dec $compatible'_logical(typ, typ) : bool

def $compatible_logical(typ_l, typ_r)
  = $compatible'_logical($canon_typ(typ_l), $canon_typ(typ_r))
def $compatible'_logical(BoolT, BoolT) = true
def $compatible'_logical(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/bine-logical:
  p C |- BinE binop expr_l expr_r : BinE binop exprIL_l exprIL_r `(BoolT; ctk)
  -- if $in_set<binop>(binop, SET ([ LAND, LOR ]))
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l
  -- Expr_ok: p C |- expr_r : exprIL_r
  ----
  -- if (exprIL_l', exprIL_r') = $coerce_binary(exprIL_l, exprIL_r)
  ----
  -- if (exprIL_l'', exprIL_r'') = $reduce_senums_binary(exprIL_l', exprIL_r', def $compatible_logical)
  ----
  -- if `(_; ctk_l'') = $annot(exprIL_l'')
  -- if `(_; ctk_r'') = $annot(exprIL_r'')
  -- if ctk = $join_ctk(ctk_l'', ctk_r'')

;;
;; Ternary expression
;;

rule Expr_ok/terne:
  p C |- TernE expr_c expr_t expr_f : TernE exprIL_c exprIL_t' exprIL_f' `(typ'; ctk)
  -- Expr_ok: p C |- expr_c : exprIL_c
  -- if `(BoolT; ctk_c) = $annot(exprIL_c)
  ----
  -- Expr_ok: p C |- expr_t : exprIL_t
  -- Expr_ok: p C |- expr_f : exprIL_f
  ----
  -- if (exprIL_t', exprIL_f') = $coerce_binary(exprIL_t, exprIL_f)
  ----
  -- if `(typ'; ctk_t) = $annot(exprIL_t')
  -- if `(_; ctk_f) = $annot(exprIL_f')
  -- if $is_intt(typ') => (ctk_c = CTK \/ ctk_c = LCTK)
  ----
  -- if ctk = $joins_ctk([ ctk_c, ctk_t, ctk_f ])

;;
;; Cast expression
;;

rule Expr_ok/caste:
  p C |- CastE type expr_b : CastE typ exprIL_b `(typ; ctk_b)
  -- Type_ok: p C |- type : typ eps
  -- Type_wf: $bound_tids(p, C) |- typ
  ----
  -- Expr_ok: p C |- expr_b : exprIL_b
  -- if `(typ_b; ctk_b) = $annot(exprIL_b)
  ----
  -- Sub_expl: typ_b <: typ

;;
;; Mask expression
;;

dec $compatible_mask(typ, typ) : bool
dec $compatible'_mask(typ, typ) : bool

def $compatible_mask(typ_l, typ_r)
  = $compatible'_mask($canon_typ(typ_l), $canon_typ(typ_r))
def $compatible'_mask(IntT, IntT) = true
def $compatible'_mask(FIntT w, FIntT w) = true
def $compatible'_mask(FBitT w, FBitT w) = true
def $compatible'_mask(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/maske:
  p C |- MaskE expr_b expr_m : MaskE exprIL_b'' exprIL_m'' `(SetT typ''; DYN)
  -- Expr_ok: p C |- expr_b : exprIL_b
  -- Expr_ok: p C |- expr_m : exprIL_m
  ----
  -- if (exprIL_b', exprIL_m') = $coerce_binary(exprIL_b, exprIL_m)
  ----
  -- if (exprIL_b'', exprIL_m'') = $reduce_senums_binary(exprIL_b', exprIL_m', def $compatible_mask)
  ----
  -- if `(typ''; _) = $annot(exprIL_b'')
  ----
  ;; -- Type_wf: $bound_tids(C) |- SetT typ''

;;
;; Range expression
;;

dec $compatible_range(typ, typ) : bool
dec $compatible'_range(typ, typ) : bool

def $compatible_range(typ_l, typ_r)
  = $compatible'_range($canon_typ(typ_l), $canon_typ(typ_r))
def $compatible'_range(IntT, IntT) = true
def $compatible'_range(FIntT w, FIntT w) = true
def $compatible'_range(FBitT w, FBitT w) = true
def $compatible'_range(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/rangee:
  p C |- RangeE expr_lb expr_ub : RangeE exprIL_lb'' exprIL_ub'' `(SetT typ''; DYN)
  -- Expr_ok: p C |- expr_lb : exprIL_lb
  -- Expr_ok: p C |- expr_ub : exprIL_ub
  ----
  -- if (exprIL_ub', exprIL_lb') = $coerce_binary(exprIL_lb, exprIL_ub)
  ----
  -- if (exprIL_lb'', exprIL_ub'') = $reduce_senums_binary(exprIL_lb', exprIL_ub', def $compatible_range)
  ----
  -- if `(typ''; _) = $annot(exprIL_lb'')
  ;; -- Type_wf: $bound_tids(C) |- SetT typ''

;;
;; Select expression
;;

relation Select_case_keyset_ok:
  cursor context typ |- keyset : keysetIL
  hint(input %0 %1 %2 %3)

rule Select_case_keyset_ok/exprk-sett:
  LOCAL C typ_k |- ExprK expr : ExprK exprIL
  -- Expr_ok: LOCAL C |- expr : exprIL
  -- if `(SetT typ; _) = $annot(exprIL)
  ----
  -- Type_alpha: typ ~~ typ_k

rule Select_case_keyset_ok/exprk-sett:
  LOCAL C typ_k |- ExprK expr : ExprK exprIL'
  -- Expr_ok: LOCAL C |- expr : exprIL
  -- if `(SetT typ; _) = $annot(exprIL)
  ----
  ;; (TODO) This is a fall-through case
  -- Sub_impl: typ << typ_k
  -- if exprIL' = CastE (SetT typ_k) exprIL `(SetT typ_k; DYN)

rule Select_case_keyset_ok/exprk-not-sett:
  LOCAL C typ_k |- ExprK expr : ExprK exprIL'
  -- Expr_ok: LOCAL C |- expr : exprIL
  -- if `(typ; _) = $annot(exprIL)
  ----
  -- Sub_impl: typ << typ_k
  -- if exprIL' = CastE (SetT typ_k) exprIL `(SetT typ_k; DYN)

rule Select_case_keyset_ok/defaultk:
  LOCAL C typ_k |- DefaultK : DefaultK

rule Select_case_keyset_ok/anyk:
  LOCAL C typ_k |- AnyK : AnyK


relation Select_case_keysets_ok:
  cursor context |- typ* keyset* : keysetIL*
  hint(input %0 %1 %2 %3)

rule Select_case_keysets_ok/one-to-one:
  p C |- typ_k keyset : keysetIL
  -- Select_case_keyset_ok: p C typ_k |- keyset : keysetIL

rule Select_case_keysets_ok/many-to-one:
  p C |- typ_k* keyset : keysetIL
  -- Select_case_keyset_ok: p C (SeqT typ_k*) |- keyset : keysetIL

rule Select_case_keysets_ok/many-to-many:
  p C |- typ_k* keyset* : keysetIL*
  -- if |typ_k*| = |keyset*|
  -- (Select_case_keyset_ok: p C typ_k |- keyset : keysetIL)*


relation Select_case_ok:
  cursor context typ* |- selectcase : selectcaseIL
  hint(input %0 %1 %2 %3)

rule Select_case_ok:
  LOCAL C typ_k* |- keyset* statelabel : keysetIL* statelabel
  -- Select_case_keysets_ok: LOCAL C |- typ_k* keyset* : keysetIL*
  -- if StateT dir'' ctk'' eps = $find_styp(LOCAL, C, CURRENT statelabel)


rule Expr_ok/selecte:
  LOCAL C |- SelectE expr_k* selectcase* : SelectE exprIL_k* selectcaseIL* `(StateT; DYN)
  -- if C.LOCAL.KIND = PARSERSTATE
  -- (Expr_ok: LOCAL C |- expr_k : exprIL_k)*
  -- if (`(typ_k; ctk_k) = $annot(exprIL_k))*
  ----
  -- (Type_wf: $bound_tids(LOCAL, C) |- SetT typ_k)*
  ----
  -- (Select_case_ok: LOCAL C typ_k* |- selectcase : selectcaseIL)*

;;
;; Array access expression
;;

dec $compatible_arrayindex(typ) : bool
dec $compatible'_arrayindex(typ) : bool

def $compatible_arrayindex(typ) = $compatible'_arrayindex($canon_typ(typ))
def $compatible'_arrayindex(IntT) = true
def $compatible'_arrayindex(FIntT _) = true
def $compatible'_arrayindex(FBitT _) = true
def $compatible'_arrayindex(typ) = false
  -- otherwise

rule Expr_ok/arracce-tuplet:
  p C |- ArrAccE expr_b expr_i : ArrAccE exprIL_b exprIL_i' `(typ; DYN)
  -- Expr_ok: p C |- expr_b : exprIL_b
  -- if `(typ_b; ctk_b) = $annot(exprIL_b)
  ----
  -- Expr_ok: p C |- expr_i : exprIL_i
  -- if `(typ_i; LCTK) = $annot(exprIL_i)
  ----
  -- if exprIL_i' = $reduce_senum_unary(exprIL_i, def $compatible_arrayindex)
  ----
  -- if TupleT typ_b'* = $canon_typ(typ_b)
  -- Eval_static: p C |- exprIL_i' ~> val_i
  -- if n = $get_num(val_i)
  -- if typ = typ_b'*[n]

rule Expr_ok/arracce-stackt-lctk:
  p C |- ArrAccE expr_b expr_i : ArrAccE exprIL_b exprIL_i' `(typ_b'; DYN)
  -- Expr_ok: p C |- expr_b : exprIL_b
  -- if `(typ_b; _) = $annot(exprIL_b)
  ----
  -- Expr_ok: p C |- expr_i : exprIL_i
  -- if `(typ_i; LCTK) = $annot(exprIL_i)
  ----
  -- if exprIL_i' = $reduce_senum_unary(exprIL_i, def $compatible_arrayindex)
  ----
  -- if StackT typ_b' i_s = $canon_typ(typ_b)
  -- Eval_static: p C |- exprIL_i' ~> val_i
  -- if i = $get_num(val_i)
  -- if $(0 <= i) /\ $(i <= i_s)

rule Expr_ok/arracce-stackt-ctk-dyn:
  p C |- ArrAccE expr_b expr_i : ArrAccE exprIL_b exprIL_i' `(typ_b'; DYN)
  -- Expr_ok: p C |- expr_b : exprIL_b
  -- if `(typ_b; ctk_b) = $annot(exprIL_b)
  ----
  -- Expr_ok: p C |- expr_i : exprIL_i
  -- if `(typ_i; ctk_i) = $annot(exprIL_i)
  -- if ctk_i =/= LCTK
  ----
  -- if exprIL_i' = $reduce_senum_unary(exprIL_i, def $compatible_arrayindex)
  ----
  -- if StackT typ_b' _ = $canon_typ(typ_b)

;;
;; Bitstring access expression
;;

dec $compatible_bitstringbase(typ) : bool
dec $compatible'_bitstringbase(typ) : bool

def $compatible_bitstringbase(typ) = $compatible'_bitstringbase($canon_typ(typ))
def $compatible'_bitstringbase(IntT) = true
def $compatible'_bitstringbase(FIntT w) = w > 0
def $compatible'_bitstringbase(FBitT _) = true
def $compatible'_bitstringbase(typ) = false
  -- otherwise

dec $compatible_bitstringindex(typ) : bool
dec $compatible'_bitstringindex(typ) : bool

def $compatible_bitstringindex(typ) = $compatible'_bitstringindex($canon_typ(typ))
def $compatible'_bitstringindex(IntT) = true
def $compatible'_bitstringindex(FIntT _) = true
def $compatible'_bitstringindex(FBitT _) = true
def $compatible'_bitstringindex(typ) = false
  -- otherwise

dec $is_valid_bitstring_slice(typ, nat, nat) : bool
dec $is_valid_bitstring_slice'(typ, nat, nat) : bool

def $is_valid_bitstring_slice(typ, n_l, n_h)
  = $(n_l <= n_h) /\ $is_valid_bitstring_slice'($canon_typ(typ), n_l, n_h)
def $is_valid_bitstring_slice'(IntT, _, _) = true
def $is_valid_bitstring_slice'(FIntT w, n_l, n_h)
  = $(n_h <= w) /\ $(w_slice <= w)
  -- if w_slice = $(n_h - n_l + 1)
def $is_valid_bitstring_slice'(FBitT w, n_l, n_h)
  = $(n_h <= w) /\ $(w_slice <= w)
  -- if w_slice = $(n_h - n_l + 1)
def $is_valid_bitstring_slice'(_, _, _) = false
  -- otherwise

rule Expr_ok/bitacce:
  p C |- BitAccE expr_b expr_l expr_h : BitAccE exprIL_b' exprIL_l'' exprIL_h'' `(typ; ctk_b')
  -- Expr_ok: p C |- expr_b : exprIL_b
  ----
  -- if exprIL_b' = $reduce_senum_unary(exprIL_b, def $compatible_bitstringbase)
  -- if `(typ_b'; ctk_b') = $annot(exprIL_b')
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l
  -- if `(typ_l; LCTK) = $annot(exprIL_l)
  ----
  -- if exprIL_l' = $reduce_senum_unary(exprIL_l, def $compatible_bitstringindex)
  ----
  -- Eval_static: p C |- exprIL_l' ~> val_l
  -- if n_l = $get_num(val_l)
  -- if exprIL_l'' = ValueE val_l `(typ_l; LCTK)
  ----
  -- Expr_ok: p C |- expr_h : exprIL_h
  -- if `(typ_h; LCTK) = $annot(exprIL_h)
  ----
  -- if exprIL_h' = $reduce_senum_unary(exprIL_h, def $compatible_bitstringindex)
  ----
  -- Eval_static: p C |- exprIL_h' ~> val_h
  -- if n_h = $get_num(val_h)
  -- if exprIL_h'' = ValueE val_h `(typ_h; LCTK)
  ----
  -- if $is_valid_bitstring_slice(typ_b', n_l, n_h)
  ----
  -- if typ = FBitT $(n_h - n_l + 1)

;;
;; Error access expression
;;

rule Expr_ok/erracce:
  p C |- ErrAccE member : ValueE (ErrV member) `(ErrT; LCTK)
  -- if id = $concat_text([ "error.", member ])
  -- if ErrV member = $find_val(p, C, TOP id)

;;
;; Type access expression
;;

rule Expr_ok/typeacce-enumt:
  p C |- TypeAccE name member : ValueE (EnumFieldV id_t member) `(typ; LCTK)
  -- if MonoD typ = $find_typdef(p, C, name)
  -- if EnumT id_t member_t* = $canon_typ(typ)
  -- if member <- member_t*

rule Expr_ok/typeacce-senumt:
  p C |- TypeAccE name member : ValueE (SEnumFieldV id_t member val) `(typ; LCTK)
  -- if MonoD typ = $find_typdef(p, C, name)
  -- if SEnumT id_t typ_t (member_t, val_t)* = $canon_typ(typ)
  -- if val = $assoc_<member, val>(member, (member_t, val_t)*)

;;
;; Expression access expression
;;

rule Expr_ok/expracce-stackt-size:
  p C |- ExprAccE expr_b "size" : ExprAccE exprIL_b "size" `(FBitT 32; LCTK)
  -- Expr_ok: p C |- expr_b : exprIL_b
  -- if `(typ_b; ctk_b) = $annot(exprIL_b)
  -- if StackT typ_s int_s = $canon_typ(typ_b)

rule Expr_ok/expracce-stackt-lastindex:
  p C |- ExprAccE expr_b "lastIndex" : ExprAccE exprIL_b "lastIndex" `(FBitT 32; DYN)
  -- if (p = BLOCK /\ C.BLOCK.KIND = PARSER) \/ (p = LOCAL /\ C.LOCAL.KIND = PARSERSTATE)
  ----
  -- Expr_ok: p C |- expr_b : exprIL_b
  -- if `(typ_b; ctk_b) = $annot(exprIL_b)
  -- if StackT typ_s int_s = $canon_typ(typ_b)

rule Expr_ok/expracce-stackt-last:
  p C |- ExprAccE expr_b "last" : ExprAccE exprIL_b "last" `(typ_s; DYN)
  -- if (p = BLOCK /\ C.BLOCK.KIND = PARSER) \/ (p = LOCAL /\ C.LOCAL.KIND = PARSERSTATE)
  ----
  -- Expr_ok: p C |- expr_b : exprIL_b
  -- if `(typ_b; ctk_b) = $annot(exprIL_b)
  -- if StackT typ_s int_s = $canon_typ(typ_b)

rule Expr_ok/expracce-stackt-next:
  p C |- ExprAccE expr_b "next" : ExprAccE exprIL_b "next" `(typ_s; DYN)
  -- Expr_ok: p C |- expr_b : exprIL_b
  -- if `(typ_b; ctk_b) = $annot(exprIL_b)
  -- if StackT typ_s int_s = $canon_typ(typ_b)

rule Expr_ok/expracce-structt:
  p C |- ExprAccE expr_b member : ExprAccE exprIL_b member `(typ; DYN)
  -- Expr_ok: p C |- expr_b : exprIL_b
  -- if `(typ_b; ctk_b) = $annot(exprIL_b)
  -- if StructT id_s (member_s, typ_s)* = $canon_typ(typ_b)
  ----
  -- if typ = $assoc_<member, typ>(member, (member_s, typ_s)*)

rule Expr_ok/expracce-headert:
  p C |- ExprAccE expr_b member : ExprAccE exprIL_b member `(typ; DYN)
  -- Expr_ok: p C |- expr_b : exprIL_b
  -- if `(typ_b; ctk_b) = $annot(exprIL_b)
  -- if HeaderT id_h (member_h, typ_h)* = $canon_typ(typ_b)
  ----
  -- if typ = $assoc_<member, typ>(member, (member_h, typ_h)*)

rule Expr_ok/expracce-uniont:
  p C |- ExprAccE expr_b member : ExprAccE exprIL_b member `(typ; DYN)
  -- Expr_ok: p C |- expr_b : exprIL_b
  -- if `(typ_b; ctk_b) = $annot(exprIL_b)
  -- if UnionT id_u (member_u, typ_u)* = $canon_typ(typ_b)
  ----
  -- if typ = $assoc_<member, typ>(member, (member_u, typ_u)*)

rule Expr_ok/expracce-tablestructt:
  p C |- ExprAccE expr_b member : ExprAccE exprIL_b member `(typ; DYN)
  -- Expr_ok: p C |- expr_b : exprIL_b
  -- if `(typ_b; ctk_b) = $annot(exprIL_b)
  -- if TableStructT id_t (member_t, typ_t)* = $canon_typ(typ_b)
  ----
  -- if typ = $assoc_<member, typ>(member, (member_t, typ_t)*)

;;
;; Function call expression
;;

rule Expr_ok/callfunce:
  p C |- CallFuncE name targ* arg* : CallFuncE name targIL'* argIL'* `(typ; DYN)
  -- (Type_ok: p C |- targ : targIL tid_fresh_a*)*
  -- if tid_fresh* = $concat_<tid>(tid_fresh_a**)
  ----
  -- FuncType_ok: p C |- name targIL* arg* : ft tid_fresh_inserted* id_deft*
  ----
  -- if tid_fresh'* = $concat_<tid>(tid_fresh* :: tid_fresh_inserted*)
  ----
  -- Call_ok: p C tid_fresh'* |- ft targIL* arg* id_deft* : typ targIL'* argIL'*
  -- if typ =/= VoidT

;;
;; Method call expression
;;

rule Expr_ok/callmethode:
  p C |- CallMethodE expr_b member eps eps : CallMethodE exprIL_b member eps eps `(IntT; LCTK)
  -- if $in_set<member>(member, SET ([ "minSizeInBits", "minSizeInBytes", "maxSizeInBits", "maxSizeInBytes" ]))
  ----
  -- MethodType_ok: p C |- expr_b member eps eps : ft exprIL_b tid_fresh_inserted* id_deft*
  ----
  -- Call_ok: p C eps |- ft eps eps eps : IntT eps eps

rule Expr_ok/callmethode:
  p C |- CallMethodE expr_b member targ* arg* : CallMethodE exprIL_b member targIL'* argIL'* `(typ; DYN)
  -- if ~$in_set<member>(member, SET ([ "minSizeInBits", "minSizeInBytes", "maxSizeInBits", "maxSizeInBytes" ]))
  ----
  -- (Type_ok: p C |- targ : targIL tid_fresh_a*)*
  -- if tid_fresh* = $concat_<tid>(tid_fresh_a**)
  ----
  -- MethodType_ok: p C |- expr_b member targIL* arg* : ft exprIL_b tid_fresh_inserted* id_deft*
  ----
  -- if tid_fresh'* = $concat_<tid>(tid_fresh* ++ tid_fresh_inserted*)
  ----
  -- Call_ok: p C tid_fresh'* |- ft targIL* arg* id_deft* : typ targIL'* argIL'*
  -- if typ =/= VoidT

;;
;; Type call expression
;;

rule Expr_ok/calltypee:
  p C |- CallTypeE name member eps eps : CallTypeE name member eps eps `(IntT; LCTK)
  -- if typdef = $find_typdef(p, C, name)
  ----
  -- if $in_set<member>(member, SET ([ "minSizeInBits", "minSizeInBytes", "maxSizeInBits", "maxSizeInBytes" ]))
  ----
  -- if ft = BuiltinMethodT eps IntT
  ----
  -- Call_ok: p C eps |- ft eps eps eps : IntT eps eps

;;
;; Nameless instantiation expression
;;

dec $not_abstract_extern_object(typ) : bool
dec $not_abstract_extern_object'(typ) : bool
dec $not_abstract_extern_object''(funcdef) : bool

def $not_abstract_extern_object(typ)
    = $not_abstract_extern_object'($canon_typ(typ))

def $not_abstract_extern_object'(typ) = true
  -- if ~$is_externt(typ)
def $not_abstract_extern_object'(ExternT _ fmap) = true
  -- if SET fid* = $dom_map<fid, funcdef>(fmap)
  -- if (fd = $find_map<fid, funcdef>(fmap, fid))*
  -- if ($not_abstract_extern_object''(fd))*
def $not_abstract_extern_object'(typ) = false
  -- otherwise

def $not_abstract_extern_object''(PolyFD (_, _) -> (ExternAbstractMethodT _ _)) = false
def $not_abstract_extern_object''(_) = true
  -- otherwise

rule Expr_ok/inste:
  p C |- InstE name targ* arg* : InstE name targIL'* argIL'* `(typ; CTK)
  -- (Type_ok: p C |- targ : targIL tid_fresh_a*)*
  -- if tid_fresh* = $concat_<tid>(tid_fresh_a**)
  ----
  -- ConsType_ok: p C |- name targIL* arg* : ct tid_fresh_inserted* id_deft*
  ----
  -- if tid_fresh'* = $concat_<tid>(tid_fresh* ++ tid_fresh_inserted*)
  ----
  -- Inst_ok: p C tid_fresh'* |- ct targIL* arg* id_deft* : typ targIL'* argIL'*
  -- if $not_abstract_extern_object(typ)

;;
;; Argument typing
;;

rule Arg_ok/expra:
  p C |- ExprA expr : (ExprA exprIL) typ
  -- Expr_ok: p C |- expr : exprIL
  -- if `(typ; _) = $annot(exprIL)

rule Arg_ok/namea-some:
  p C |- NameA id expr : (NameA id exprIL) typ
  -- Expr_ok: p C |- expr : exprIL
  -- if `(typ; _) = $annot(exprIL)

rule Arg_ok/expra-none:
  p C |- NameA id eps : (NameA id eps) AnyT

rule Arg_ok/anya:
  p C |- AnyA : AnyA AnyT
