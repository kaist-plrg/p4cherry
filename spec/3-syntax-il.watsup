;;
;; Numbers
;;

syntax numIL = num

;;
;; Texts
;;

;;
;; Identifiers
;;

syntax idIL = id

;;
;; Variables (scoped identifiers)
;;

syntax nameIL = name

;;
;; Members
;;

syntax memberIL = idIL

;;
;; Match kinds
;;

syntax matchkindIL = idIL

;;
;; State labels
;;

syntax statelabelIL = idIL

;;
;; Unary operators
;;

syntax unopIL = unop

;;
;; Binary operators
;;

syntax binopIL = binop

;;
;; Directions
;;

syntax dirIL = dir

;;
;; Types
;;

syntax typeIL = typ

;;
;; Type parameters
;;

syntax tparamIL = id

;;
;; Parameters
;;

syntax paramIL = idIL dirIL typeIL val?

;;
;; Constructor parameters
;;

syntax cparamIL = paramIL

;;
;; Type arguments
;;

syntax targIL = typeIL

;;
;; Arguments
;;

syntax argIL =
  | ExprA exprIL          hint(show %)
  | NameA idIL exprIL?    hint(show % = %)
  | AnyA                  hint(show _)

;;
;; Keyset expressions
;;

syntax keysetIL =
  | ExprK exprIL    hint(show %)
  | DefaultK        hint(show DEFAULT)
  | AnyK            hint(show _)

;;
;; Select-cases for select
;;

syntax selectcaseIL = keysetIL* statelabelIL

;;
;; Expressions
;;

syntax exprIL =
  | ValueE val                                        hint(show %)
  | NameE nameIL                                      hint(show %)
  | SeqE exprIL*                                      hint(show %latex("\\{")#%#%latex("\\}"))
  | SeqDefaultE exprIL*                               hint(show %latex("\\{")#%, ... %latex("\\}"))
  | RecordE (memberIL, exprIL)*                       hint(show %latex("\\{")#%#%latex("\\}"))
  | RecordDefaultE (memberIL, exprIL)*                hint(show %latex("\\{")#%, ... %latex("\\}"))
  | DefaultE                                          hint(show ...%latex())
  | UnE unopIL exprIL                                 hint(show %#%)
  | BinE binopIL exprIL exprIL                        hint(show %2 %1 %3)
  | TernE exprIL exprIL exprIL                        hint(show (% %latex("?") % `: %))
  | CastE typeIL exprIL                               hint(show (%) %)
  | MaskE exprIL exprIL                               hint(show % %latex("\\&\\&\\&") %)
  | RangeE exprIL exprIL                              hint(show % ... %)
  | SelectE exprIL* selectcaseIL*                     hint(show SELECT (%) %latex("\\{")#%#%latex("\\}"))
  | ArrAccE exprIL exprIL                             hint(show %`[%])
  | BitAccE exprIL val val                            hint(show %`[% `: %])
  | ExprAccE exprIL memberIL                          hint(show %.%)
  | CallFuncE nameIL targIL* argIL*                   hint(show %#%latex("\\langle")#%#%latex("\\rangle")#(%)#%latex())
  | CallMethodE exprIL memberIL targIL* argIL*        hint(show %.%#%latex("\\langle")#%#%latex("\\rangle")#(%)#%latex())
  | CallTypeE nameIL memberIL targIL* argIL*          hint(show %.%#%latex("\\langle")#%#%latex("\\rangle")#(%)#%latex())
  | InstE nameIL targIL* argIL*                       hint(show %#%latex("\\langle")#%#%latex("\\rangle")#(%)#%latex())

;;
;; Blocks (sequence of statements)
;;

syntax blockIL = BlockB stmtIL*   hint(show %latex("\\{")#%#%latex("\\}"))

;;
;; Statements
;;

syntax stmtIL =
  | EmptyS                                            hint(show EMPTY)
  | AssignS exprIL exprIL                             hint(show % = %)
  | SwitchS exprIL switchcaseIL*                      hint(show SWITCH (%) %latex("\\{")#%#%latex("\\}"))
  | IfS exprIL stmtIL stmtIL                          hint(show IF (%) THEN % ELSE %)
  | BlockS blockIL                                    hint(show %)
  | ExitS                                             hint(show EXIT)
  | RetS exprIL?                                      hint(show RETURN %)
  | CallFuncS nameIL targIL* argIL*                   hint(show %#%latex("\\langle")#%#%latex("\\rangle")#(%)#%latex())
  | CallMethodS exprIL memberIL targIL* argIL*        hint(show %1#%latex("\\langle")#%3#%latex("\\rangle").%2#(%4)#%latex())
  | CallInstS typeIL nameIL targIL* argIL*            hint(show %2%latex("\\langle")#%3#%latex("\\rangle").APPLY#(%4)#%latex() %latex("/*")%1%latex("*/"))
  | TransS exprIL                                     hint(show TRANSITION %)
  | DeclS declIL                                      hint(show %)

;;
;; Match labels and cases for switch
;;

syntax switchlabelIL =
  | ExprL exprIL    hint(show %)
  | DefaultL        hint(show DEFAULT)

syntax switchcaseIL =
  | MatchC switchlabelIL blockIL      hint(show CASE % %)
  | FallC switchlabelIL               hint(show CASE %)

;;
;; Parser state machine
;;

syntax parserstateIL = statelabelIL blockIL

;;
;; Tables
;;

syntax tblIL = tblpropIL*

;;
;; Table keys
;;

syntax tblkeyIL = exprIL matchkindIL
syntax tblkeypropIL = tblkeyIL*

;;
;; Table actions
;;

syntax tblactionIL = nameIL argIL* paramIL* paramIL*
syntax tblactionpropIL = tblactionIL*

;;
;; Table entries
;;

syntax tblentryIL = bool keysetIL* tblactionIL val?
syntax tblentrypropIL = bool tblentryIL*

;;
;; Table default properties
;;

syntax tbldefaultpropIL = bool tblactionIL

;;
;; Table custom properties
;;

syntax tblcustompropIL = bool memberIL exprIL

;;
;; Table properties
;;

syntax tblpropIL =
  | KeyP tblkeypropIL           hint(show KEYS %latex("\\{")#%#%latex("\\}"))
  | ActionP tblactionpropIL     hint(show ACTIONS %latex("\\{")#%#%latex("\\}"))
  | EntryP tblentrypropIL       hint(show ENTRIES %latex("\\{")#%#%latex("\\}"))
  | DefaultP tbldefaultpropIL   hint(show DEFAULT#_#ACTION %latex("\\{")#%#%latex("\\}"))
  | CustomP tblcustompropIL     hint(show CUSTOM %latex("\\{")#%#%latex("\\}"))

;;
;; Methods
;;

syntax methodIL =
  | ExternConsM idIL tparamIL* cparamIL*                        hint(show %#%latex("\\langle")#%#%latex("\\rangle")#(%)#%latex())
  | ExternAbstractM idIL typeIL tparamIL* tparamIL* paramIL*    hint(show ABSTRACT %2 %1#%latex("\\langle")#%3, %4#%latex("\\rangle")#(%5)#%latex())
  | ExternM idIL typeIL tparamIL* tparamIL* paramIL*            hint(show %2 %1#%latex("\\langle")#%3, %4#%latex("\\rangle")#(%5)#%latex())

;;
;; Declarations
;;

syntax declIL =
  | ConstD idIL typeIL val                                              hint(show CONST %2 %1 = %3)
  | VarD idIL typeIL exprIL?                                            hint(show %2 %1 = %3)
  | ErrD memberIL*                                                      hint(show ERROR %latex("\\{")#%#%latex("\\}"))
  | MatchKindD memberIL*                                                hint(show MATCH#_#KIND %latex("\\{")#%#%latex("\\}"))
  | InstD idIL typeIL nameIL targIL* argIL* declIL*                     hint(show %3#%latex("\\langle")#%4#%latex("\\rangle")#(%5) %1 = %latex("\\{")#%6#%latex("\\}") %latex("/*")%2%latex("*/"))
  | StructD idIL tparamIL* tparamIL* (memberIL, typeIL)*                hint(show STRUCT %#%latex("\\langle")#%,%#%latex("\\rangle") %latex("\\{")#%#%latex("\\}"))
  | HeaderD idIL tparamIL* tparamIL* (memberIL, typeIL)*                hint(show HEADER %#%latex("\\langle")#%,%#%latex("\\rangle") %latex("\\{")#%#%latex("\\}"))
  | UnionD idIL tparamIL* tparamIL* (memberIL, typeIL)*                 hint(show UNION %#%latex("\\langle")#%,%#%latex("\\rangle") %latex("\\{")#%#%latex("\\}"))
  | EnumD idIL memberIL*                                                hint(show ENUM % %latex("\\{")#%#%latex("\\}"))
  | SEnumD idIL typeIL (memberIL, val)*                                 hint(show ENUM % % %latex("\\{")#%#%latex("\\}"))
  ;; TODO NewTypeD id decl is also valid
  | NewTypeD idIL typeIL                                                hint(show TYPE % %)
  ;; TODO TypeDefD id decl is also valid
  | TypeDefD idIL typeIL                                                hint(show TYPEDEF % %)
  | ValueSetD idIL typeIL exprIL                                        hint(show VALUE#_#SET#%latex("\\langle")#%2#%latex("\\rangle")#(%3)#%latex() %1)
  | ParserTypeD idIL tparamIL* tparamIL* paramIL*                       hint(show PARSER %#%latex("\\langle")#%,%#%latex("\\rangle")#(%)#%latex())
  | ParserD idIL paramIL* cparamIL* declIL* parserstateIL*              hint(show PARSER %#(%)#(%)#%latex() %latex("\\{")#%%#%latex("\\}"))
  | TableD idIL typeIL tblIL                                            hint(show TABLE %1 %latex("\\{")#%3#%latex("\\}") %latex("/*")%2%latex("*/"))
  | ControlTypeD idIL tparamIL* tparamIL* paramIL*                      hint(show CONTROL %#%latex("\\langle")#%,%#%latex("\\rangle")#(%)#%latex())
  | ControlD idIL paramIL* cparamIL* declIL* blockIL                    hint(show CONTROL %#(%)#(%)#%latex() %latex("\\{")#% APPLY %#%latex("\\}"))
  | ActionD idIL paramIL* blockIL                                       hint(show ACTION %(%) %)
  | FuncD idIL typeIL tparamIL* tparamIL* paramIL* blockIL              hint(show %2 %1#%latex("\\langle")#%3, %4#%latex("\\rangle")#(%5)#%latex() %6)
  | ExternFuncD idIL typeIL tparamIL* tparamIL* paramIL*                hint(show EXTERN %2 %1#%latex("\\langle")#%3, %4#%latex("\\rangle")#(%5)#%latex())
  | ExternObjectD idIL tparamIL* methodIL*                              hint(show EXTERN %#%latex("\\langle")#%#%latex("\\rangle") %latex("\\{")#%#%latex("\\}"))
  | PackageTypeD idIL tparamIL* tparamIL* cparamIL*                     hint(show PACKAGE %#%latex("\\langle")#%, %#%latex("\\rangle")#(%)#%latex())

;;
;; Program
;;

syntax programIL = declIL*
