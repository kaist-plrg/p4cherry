;;
;; Substitution (capture-avoiding)
;;

syntax theta hint(show %latex("\\theta")) = map<id, typ>

dec $free_typ(typ) : set<tid>
    hint(show %latex("FV(")#%1#%latex(")"))
dec $free_typdef_poly(polytypdef) : set<tid>
    hint(show %latex("FV(")#%1#%latex(")"))
dec $free_functyp(functyp) : set<tid>
    hint(show %latex("FV(")#%1#%latex(")"))
dec $free_funcdef(funcdef) : set<tid>
    hint(show %latex("FV(")#%1#%latex(")"))

dec $subst_typ(theta, typ) : typ
    hint(show %2#%latex("/")#%1)
dec $subst_typdef_poly(theta, polytypdef) : polytypdef
    hint(show %2#%latex("/")#%1)
dec $subst_funcdef(theta, funcdef) : funcdef
    hint(show %2#%latex("/")#%1)
dec $subst_functyp(theta, functyp) : functyp
    hint(show %2#%latex("/")#%1)
dec $subst_constyp(theta, constyp) : constyp
    hint(show %2#%latex("/")#%1)

;;
;; Free type variables in types
;;

def $free_typ(basetyp) = SET eps

def $free_typ(VarT id) = SET id

def $free_typ(SpecT ptd typ*) = $union_set<tid>(tidset_ptd, tidset_typs)
  -- if tidset_ptd = $free_typdef_poly(ptd)
  -- if tidset_typs = $unions_set<tid>($free_typ(typ)*)

def $free_typ(DefT typ) = $free_typ(typ)

def $free_typ(NewT _ typ) = $free_typ(typ)

def $free_typ(EnumT _ _) = SET eps

def $free_typ(SEnumT _ typ _) = $free_typ(typ)

def $free_typ(ListT typ) = $free_typ(typ)

def $free_typ(TupleT typ*) = $unions_set<tid>($free_typ(typ)*)

def $free_typ(StackT typ _) = $free_typ(typ)

def $free_typ(StructT _ (_, typ)*) = $unions_set<tid>($free_typ(typ)*)

def $free_typ(HeaderT _ (_, typ)*) = $unions_set<tid>($free_typ(typ)*)

def $free_typ(UnionT _ (_, typ)*) = $unions_set<tid>($free_typ(typ)*)

def $free_typ(ExternT _ (MAP (PAIR _ fd)*)) = $unions_set<tid>($free_funcdef(fd)*)

def $free_typ(ParserT pt*) = $unions_set<tid>(($free_typ(typ))*)
  -- if (_ _ typ _ = pt)*

def $free_typ(ControlT pt*) = $unions_set<tid>(($free_typ(typ))*)
  -- if (_ _ typ _ = pt)*

def $free_typ(PackageT typ*) = $unions_set<tid>($free_typ(typ)*)

def $free_typ(TableT _ typ) = $free_typ(typ)

def $free_typ(DefaultT) = SET eps

def $free_typ(SeqT typ*) = $unions_set<tid>($free_typ(typ)*)

def $free_typ(SeqDefaultT typ*) = $unions_set<tid>($free_typ(typ)*)

def $free_typ(RecordT (_, typ)*) = $unions_set<tid>($free_typ(typ)*)

def $free_typ(RecordDefaultT (_, typ)*) = $unions_set<tid>($free_typ(typ)*)

def $free_typ(InvalidT) = SET eps

def $free_typ(SetT typ) = $free_typ(typ)

def $free_typ(StateT) = SET eps

def $free_typ(TableEnumT _ _) = SET eps

def $free_typ(TableStructT _ (_, typ)*) = $unions_set<tid>($free_typ(typ)*)

def $free_typ(AnyT) = SET eps

;;
;; Free type variables in type definitions
;;

def $free_typdef_poly(PolyD (tparam*, tparam_hidden*) -> typ)
    = $diff_set<tid>(tidset_typ, tidset_tparams)
  -- if tidset_typ = $free_typ(typ)
  -- if tidset_tparams = SET (tparam* ++ tparam_hidden*)

;;
;; Free type variables in function types
;;

def $free_functyp(ActionT pt*) = $unions_set<tid>(($free_typ(typ))*)
  -- if (_ _ typ _ = pt)*

def $free_functyp(ExternFuncT pt* typ_r)
    = $union_set<tid>(tidset_params, tidset_return)
  -- if (_ _ typ_p _ = pt)*
  -- if tidset_params = $unions_set<tid>($free_typ(typ_p)*)
  -- if tidset_return = $free_typ(typ_r)

def $free_functyp(FuncT pt* typ_r)
    = $union_set<tid>(tidset_params, tidset_return)
  -- if (_ _ typ_p _ = pt)*
  -- if tidset_params = $unions_set<tid>($free_typ(typ_p)*)
  -- if tidset_return = $free_typ(typ_r)

def $free_functyp(BuiltinMethodT pt* typ_r)
    = $union_set<tid>(tidset_params, tidset_return)
  -- if (_ _ typ_p _ = pt)*
  -- if tidset_params = $unions_set<tid>($free_typ(typ_p)*)
  -- if tidset_return = $free_typ(typ_r)

def $free_functyp(ExternMethodT pt* typ_r)
    = $union_set<tid>(tidset_params, tidset_return)
  -- if (_ _ typ_p _ = pt)*
  -- if tidset_params = $unions_set<tid>($free_typ(typ_p)*)
  -- if tidset_return = $free_typ(typ_r)

def $free_functyp(ExternAbstractMethodT pt* typ_r)
    = $union_set<tid>(tidset_params, tidset_return)
  -- if (_ _ typ_p _ = pt)*
  -- if tidset_params = $unions_set<tid>($free_typ(typ_p)*)
  -- if tidset_return = $free_typ(typ_r)

def $free_functyp(ParserApplyMethodT pt*) = $unions_set<tid>(($free_typ(typ))*)
  -- if (_ _ typ _ = pt)*

def $free_functyp(ControlApplyMethodT pt*) = $unions_set<tid>(($free_typ(typ))*)
  -- if (_ _ typ _ = pt)*

def $free_functyp(TableApplyMethodT typ) = $free_typ(typ)

;;
;; Free type variables in function definitions
;;

def $free_funcdef(MonoFD ft) = $free_functyp(ft)

def $free_funcdef(PolyFD (tparam*, tparam_hidden*) -> ft)
    = $diff_set<tid>(tidset_ft, tidset_tparams)
  -- if tidset_ft = $free_functyp(ft)
  -- if tidset_tparams = SET (tparam* ++ tparam_hidden*)

;;
;; Type substitutions
;;

def $subst_typ(theta, VarT id) = $find_map<id, typ>(theta, id)
  -- if $in_set<id>(id, $dom_map<id, typ>(theta))

def $subst_typ(theta, SpecT ptd typ*) = SpecT ptd' typ'*
  -- if ptd' = $subst_typdef_poly(theta, ptd)
  -- if typ'* = ($subst_typ(theta, typ))*

def $subst_typ(theta, DefT typ) = $subst_typ(theta, typ)

def $subst_typ(theta, NewT id typ) = NewT id ($subst_typ(theta, typ))

def $subst_typ(theta, SEnumT id typ (member, val)*) = SEnumT id ($subst_typ(theta, typ)) (member, val)*

def $subst_typ(theta, ListT typ) = ListT $subst_typ(theta, typ)

def $subst_typ(theta, TupleT typ*) = TupleT ($subst_typ(theta, typ))*

def $subst_typ(theta, StackT typ int) = StackT ($subst_typ(theta, typ)) int

def $subst_typ(theta, StructT id (member, typ)*) = StructT id (member, $subst_typ(theta, typ))*

def $subst_typ(theta, HeaderT id (member, typ)*) = HeaderT id (member, $subst_typ(theta, typ))*

def $subst_typ(theta, UnionT id (member, typ)*) = UnionT id (member, $subst_typ(theta, typ))*

def $subst_typ(theta, ExternT id fmap) = ExternT id fmap'
  -- if MAP (PAIR fid funcdef)* = fmap
  -- if fmap' = MAP (PAIR fid $subst_funcdef(theta, funcdef))*

def $subst_typ(theta, ParserT pt*) = ParserT pt'*
  -- if (id dir typ val? = pt)*
  -- if (pt' = id dir ($subst_typ(theta, typ)) val?)*

def $subst_typ(theta, ControlT pt*) = ControlT pt'*
  -- if (id dir typ val? = pt)*
  -- if (pt' = id dir ($subst_typ(theta, typ)) val?)*

def $subst_typ(theta, PackageT typ*) = PackageT ($subst_typ(theta, typ))*

def $subst_typ(theta, TableT id typ) = TableT id ($subst_typ(theta, typ))

def $subst_typ(theta, TableStructT id (member, typ)*) = TableStructT id (member, $subst_typ(theta, typ))*

def $subst_typ(theta, SeqT typ*) = SeqT ($subst_typ(theta, typ))*

def $subst_typ(theta, SeqDefaultT typ*) = SeqDefaultT ($subst_typ(theta, typ))*

def $subst_typ(theta, RecordT (member, typ)*) = RecordT (member, $subst_typ(theta, typ))*

def $subst_typ(theta, RecordDefaultT (member, typ)*) = RecordDefaultT (member, $subst_typ(theta, typ))*

def $subst_typ(theta, SetT typ) = SetT ($subst_typ(theta, typ))

def $subst_typ(theta, typ) = typ
  -- otherwise

;;
;; Type definition substitutions
;;

def $subst_typdef_poly(theta, PolyD (tparam*, tparam_hidden*) -> typ) = PolyD (tparam''*, tparam''_hidden*) -> typ'
  -- if SET tid_free* = $diff_set<tid>($free_typ(typ), SET (tparam* ++ tparam_hidden*))
  -- if tidset_capture = $unions_set<tid>(($free_typ($find_map<tid, typ>(theta, tid_free)))*)
  ----
  -- if tparam'* = $fresh_tids(|tparam* ++ tparam_hidden*|)
  -- if (~$in_set<tid>(tparam', tidset_capture))*
  ----
  -- if tparam''* = tparam'*[0 : |tparam*|]
  -- if tparam''_hidden* = tparam'*[|tparam*| : |tparam_hidden*|]
  ----
  -- if theta' = $adds_map<tid, typ>(theta, tparam*, (VarT tparam'')*)
  -- if theta'' = $adds_map<tid, typ>(theta', tparam_hidden*, (VarT tparam''_hidden)*)
  ----
  -- if typ' = $subst_typ(theta'', typ)

;;
;; Function definition substitutions
;;

def $subst_funcdef(theta, MonoFD ft) = MonoFD ($subst_functyp(theta, ft))

def $subst_funcdef(theta, PolyFD (tparam*, tparam_hidden*) -> ft) = PolyFD (tparam''*, tparam''_hidden*) -> ft'
  -- if SET tid_free* = $diff_set<tid>($free_functyp(ft), SET (tparam* ++ tparam_hidden*))
  -- if tidset_capture = $unions_set<tid>(($free_typ($find_map<tid, typ>(theta, tid_free)))*)
  ----
  -- if tparam'* = $fresh_tids(|tparam* ++ tparam_hidden*|)
  -- if (~$in_set<tid>(tparam', tidset_capture))*
  ----
  -- if tparam''* = tparam'*[0 : |tparam*|]
  -- if tparam''_hidden* = tparam'*[|tparam*| : |tparam_hidden*|]
  ----
  -- if theta' = $adds_map<tid, typ>(theta, tparam*, (VarT tparam')*)
  -- if theta'' = $adds_map<tid, typ>(theta', tparam_hidden*, (VarT tparam''_hidden)*)
  ----
  -- if ft' = $subst_functyp(theta'', ft)

;;
;; Function type substitutions
;;

def $subst_functyp(theta, BuiltinMethodT pt* typ) = BuiltinMethodT pt'* ($subst_typ(theta, typ))
  -- if (id dir typ_p val? = pt)*
  -- if (pt' = id dir ($subst_typ(theta, typ_p)) val?)*

def $subst_functyp(theta, ActionT pt*) = ActionT pt'*
  -- if (id dir typ val? = pt)*
  -- if (pt' = (id dir ($subst_typ(theta, typ)) val?))*

def $subst_functyp(theta, ParserApplyMethodT pt*) = ParserApplyMethodT pt'*
  -- if (id dir typ val? = pt)*
  -- if (pt' = (id dir ($subst_typ(theta, typ)) val?))*

def $subst_functyp(theta, ControlApplyMethodT pt*) = ControlApplyMethodT pt'*
  -- if (id dir typ val? = pt)*
  -- if (pt' = (id dir ($subst_typ(theta, typ)) val?))*

def $subst_functyp(theta, TableApplyMethodT typ) = TableApplyMethodT ($subst_typ(theta, typ))

def $subst_functyp(theta, ExternFuncT pt* typ) = ExternFuncT pt'* ($subst_typ(theta, typ))
  -- if (id dir typ_p val? = pt)*
  -- if (pt' = (id dir ($subst_typ(theta, typ_p)) val?))*

def $subst_functyp(theta, FuncT pt* typ) = FuncT pt'* ($subst_typ(theta, typ))
  -- if (id dir typ_p val? = pt)*
  -- if (pt' = (id dir ($subst_typ(theta, typ_p)) val?))*

def $subst_functyp(theta, ExternMethodT pt* typ) = ExternMethodT pt'* ($subst_typ(theta, typ))
  -- if (id dir typ_p val? = pt)*
  -- if (pt' = (id dir ($subst_typ(theta, typ_p)) val?))*

def $subst_functyp(theta, ExternAbstractMethodT pt* typ) = ExternAbstractMethodT pt'* ($subst_typ(theta, typ))
  -- if (id dir typ_p val? = pt)*
  -- if (pt' = (id dir ($subst_typ(theta, typ_p)) val?))*

;;
;; Constructor type substitutions
;;

def $subst_constyp(theta, ConsT pt* typ) = ConsT pt'* $subst_typ(theta, typ)
  -- if (id dir typ_p val? = pt)*
  -- if (pt' = (id dir ($subst_typ(theta, typ_p)) val?))*

;;
;; Specializations
;;

;;
;; Typedef specialization
;;

dec $specialize_typdef(typdef, typ*) : typ
    hint(show %#%latex("\\langle")#%#%latex("\\rangle"))

def $specialize_typdef(MonoD typ, eps) = typ
def $specialize_typdef(PolyD (tparam*, tparam_hidden*) -> typ, typ_a*) = $subst_typ(theta, typ)
  -- if tparam'* = tparam* ++ tparam_hidden*
  -- if theta = MAP (PAIR tparam' typ_a)*

;;
;; Funcdef specialization
;;

dec $specialize_funcdef(funcdef, typ*) : (functyp, tid*)
    hint(show %#%latex("\\langle")#%#%latex("\\rangle"))

def $specialize_funcdef(MonoFD ft, eps) = (ft, eps)

def $specialize_funcdef(PolyFD (tparam*, tparam_hidden*) -> ft, typ_a*) = ($subst_functyp(MAP (PAIR tparam' typ_a)*, ft), eps)
  -- if tparam'* = tparam* ++ tparam_hidden*
  -- if |tparam'*| = |typ_a*|

def $specialize_funcdef(PolyFD (tparam*, tparam_hidden*) -> ft, typ_a*) = ($subst_functyp(MAP (PAIR tparam' (VarT tid_fresh))*, ft), tid_fresh*)
  -- if tparam'* = tparam* ++ tparam_hidden*
  -- if |typ_a*| = 0 /\ |tparam'*| > 0
  ----
  -- if tid_fresh* = $fresh_tids(|tparam'*|)

def $specialize_funcdef(PolyFD (tparam*, tparam_hidden*) -> ft, typ_a*) = ($subst_functyp(MAP (PAIR tparam' typ_a')*, ft), tid_fresh*)
  -- if tparam'* = tparam* ++ tparam_hidden*
  -- if |typ_a*| > 0 /\ |tparam*| = |typ_a*| /\ |tparam_hidden*| > 0
  ----
  -- if tid_fresh* = $fresh_tids(|tparam_hidden*|)
  ----
  -- if typ_a'* = typ_a* ++ (VarT tid_fresh)*

;;
;; Constructor definition specialization
;;

dec $specialize_consdef(consdef, typ*) : (constyp, tid*)
    hint(show %#%latex("\\langle")#%#%latex("\\rangle"))

def $specialize_consdef(ConsD (tparam*, tparam_hidden*) -> ct, typ_a*) = ($subst_constyp(MAP (PAIR tparam' typ_a)*, ct), eps)
  -- if tparam'* = tparam* ++ tparam_hidden*
  -- if |tparam'*| = |typ_a*|

def $specialize_consdef(ConsD (tparam*, tparam_hidden*) -> ct, typ_a*) = ($subst_constyp(MAP (PAIR tparam' (VarT tid_fresh))*, ct), tid_fresh*)
  -- if tparam'* = tparam* ++ tparam_hidden*
  -- if |typ_a*| = 0 /\ |tparam'*| > 0
  ----
  -- if tid_fresh* = $fresh_tids(|tparam'*|)

def $specialize_consdef(ConsD (tparam*, tparam_hidden*) -> ct, typ_a*) = ($subst_constyp(MAP (PAIR tparam' typ_a')*, ct), tid_fresh*)
  -- if tparam'* = tparam* ++ tparam_hidden*
  -- if |typ_a*| > 0 /\ |tparam*| = |typ_a*| /\ |tparam_hidden*| > 0
  ----
  -- if tid_fresh* = $fresh_tids(|tparam_hidden*|)
  ----
  -- if typ_a'* = typ_a* ++ (VarT tid_fresh)*

;;
;; Canonicalization (recursive specialization and typedef unrolling)
;;

dec $canon_typ(typ) : typ
    hint(show %#%latex("|_{\\mathtt{canon}}"))

def $canon_typ(SpecT ptd typ_a*) = $canon_typ(typ)
  -- if typ = $specialize_typdef(ptd, typ_a*)
def $canon_typ(DefT typ) = $canon_typ(typ)
def $canon_typ(typ) = typ
  -- otherwise
