;;
;; Calling convention
;;

rule Call_convention_ok/in:
  p C actctxt |- (id IN typ_p val?) ~~ (exprIL, typ_a) : exprIL'
  -- if exprIL' = $coerce_assign(exprIL, typ_p)

rule Call_convention_ok/out-inout:
  p C actctxt |- (id dir typ_p val?) ~~ (exprIL, typ_a) : exprIL
  -- if dir = OUT \/ dir = INOUT
  -- Type_alpha: typ_a ~~ typ_p
  -- Lval_ok: p C |- exprIL

rule Call_convention_ok/no-action:
  p C ACT |- (id NO typ_p val?) ~~ (exprIL, typ_a) : exprIL'
  -- if exprIL' = $coerce_assign(exprIL, typ_p)

rule Call_convention_ok/no-not-action:
  p C NOACT |- (id NO typ val?) ~~ (exprIL, typ') : exprIL
  -- if `(_; ctk) = $annot(exprIL)
  -- if ctk = LCTK \/ ctk = CTK
  -- Type_alpha: typ' ~~ typ


rule Call_convention_arg_ok/expra:
  p C actctxt |- pt ~~ (ExprA exprIL, typ) : ExprA exprIL'
  -- Call_convention_ok: p C actctxt |- pt ~~ (exprIL, typ) : exprIL'

rule Call_convention_arg_ok/namea-some:
  p C actctxt |- pt ~~ (NameA id exprIL, typ) : NameA id exprIL'
  -- Call_convention_ok: p C actctxt |- pt ~~ (exprIL, typ) : exprIL'

rule Call_convention_arg_ok/namea-none:
  p C actctxt |- (_ OUT _ _) ~~ (NameA id eps, _) : NameA id eps

rule Call_convention_arg_ok/anya:
  p C actctxt |- (_ OUT _ _) ~~ (AnyA, _) : AnyA

;;
;; Function typing
;;

rule FuncType_ok:
   p C |- name targIL* arg* : ft tid_fresh* id_deft*
   -- if (fid, fd, id_deft*) = $find_funcdef(p, C, name, arg*)
   -- if (ft, tid_fresh*) = $specialize_funcdef(fd, targIL*)

;;
;; Method typing
;;

;; (TODO-Jaehyun) check that builtin is defined on typ_b
rule MethodType_ok/builtin-size:
  p C |- expr_b member eps eps : (BuiltinMethodT eps IntT) exprIL_b eps eps
  -- Expr_ok: p C |- expr_b : exprIL_b
  ----
  -- if member <- [ "minSizeInBits", "minSizeInBytes", "maxSizeInBits", "maxSizeInBytes" ]

rule MethodType_ok/builtin-stackt:
  p C |- expr_b member eps arg* : (BuiltinMethodT pt IntT) exprIL_b eps eps
  -- if member <- [ "push_front", "pop_front" ]
  ----
  -- Expr_ok: p C |- expr_b: exprIL_b
  -- if `(typ_b; _) = $annot(exprIL_b)
  -- if StackT typ_b_in int_b = $canon_typ(typ_b)
  ----
  -- if pt = "count" NO IntT eps

rule MethodType_ok/builtin-headert-isvalid:
  p C |- expr_b "isValid" eps arg* : (BuiltinMethodT eps BoolT) exprIL_b eps eps
  ----
  -- Expr_ok: p C |- expr_b: exprIL_b
  -- if `(typ_b; _) = $annot(exprIL_b)
  -- if HeaderT id_b (member, typ_b_in)* = $canon_typ(typ_b)

rule MethodType_ok/builtin-headert-setvalid-invalid:
  p C |- expr_b member eps arg* : (BuiltinMethodT eps VoidT) exprIL_b eps eps
  -- if member <- [ "setValid", "setInvalid" ]
  ----
  -- Expr_ok: p C |- expr_b: exprIL_b
  -- if `(typ_b; _) = $annot(exprIL_b)
  -- if HeaderT id_b (member_b, typ_b_in)* = $canon_typ(typ_b)

rule MethodType_ok/builtin-uniont:
  p C |- expr_b "isValid" eps arg* : (BuiltinMethodT eps BoolT) exprIL_b eps eps
  ----
  -- Expr_ok: p C |- expr_b: exprIL_b
  -- if `(typ_b; _) = $annot(exprIL_b)
  -- if UnionT id_b (member, typ_b_in)* = $canon_typ(typ_b)

rule MethodType_ok/externt:
  p C |- expr_b member targIL* arg* : ft exprIL_b tid_fresh* id_deft*
  ----
  -- Expr_ok: p C |- expr_b: exprIL_b
  -- if `(typ_b; _) = $annot(exprIL_b)
  -- if ExternT id_b fmap_b = $canon_typ(typ_b)
  ----
  -- if (fid, fd, id_deft*) = $find_func<funcdef>(member, $to_fkey(arg*), fmap_b)
  -- if (ft, tid_fresh*) = $specialize_funcdef(fd, targIL*)

rule MethodType_ok/parsert:
  p C |- expr_b "apply" eps arg* : ft exprIL_b eps id_deft*
  ----
  -- Expr_ok: p C |- expr_b: exprIL_b
  -- if `(typ_b; _) = $annot(exprIL_b)
  -- if ParserT pt* = $canon_typ(typ_b)
  ----
  -- if ft = ParserApplyMethodT pt*
  -- if fd = MonoFD ft
  ----
  -- if (id_p _ _ val_deft? = pt)*
  -- if (b_deft = (val_deft? =/= eps))*
  -- if fid = "apply" (id_p, b_deft)*
  ----
  -- if (fid, MonoFD ft, id_deft*) = $find_func<funcdef>("apply", $to_fkey(arg*), `{ (fid -> fd) })

rule MethodType_ok/controlt:
  p C |- expr_b "apply" eps arg* : ft exprIL_b eps id_deft*
  ----
  -- Expr_ok: p C |- expr_b: exprIL_b
  -- if `(typ_b; _) = $annot(exprIL_b)
  -- if ControlT pt* = $canon_typ(typ_b)
  ----
  -- if ft = ControlApplyMethodT pt*
  -- if fd = MonoFD ft
  ----
  -- if (id_p _ _ val_deft? = pt)*
  -- if (b_deft = (val_deft? =/= eps))*
  -- if fid = "apply" (id_p, b_deft)*
  ----
  -- if (fid, MonoFD ft, id_deft*) = $find_func<funcdef>("apply", $to_fkey(arg*), `{ (fid -> fd) })

rule MethodType_ok/tablet:
  p C |- expr_b "apply" eps eps : functyp exprIL_b eps eps
  ----
  -- Expr_ok: p C |- expr_b: exprIL_b
  -- if `(typ_b; _) = $annot(exprIL_b)
  -- if TableT id typ_t = $canon_typ(typ_b)
  ----
  -- if functyp = TableApplyMethodT typ_t

;;
;; Helpers for invocation
;;

;; Filter out default arguments, leaving only the required ones

dec $filter_default_args(paramtyp*, id*) : paramtyp*
    hint(show FILTER_DEFAULT_ARGS%latex("(")#%1#%latex(", ")#%2#%latex(")"))

def $filter_default_args(eps, id_deft*) = eps
def $filter_default_args(pt_h :: pt_t*, id_deft*) = $filter_default_args(pt_t*, id_deft*)
  -- if id_p _ _ _ = pt_h
  -- if id_p <- id_deft*
def $filter_default_args(pt_h :: pt_t*, id_deft*) = pt_h :: $filter_default_args(pt_t*, id_deft*)
  -- otherwise

;; If arguments are named, align parameters along with the arguments

syntax pmap = map<id, paramtyp>

dec $align_params_with_args(paramtyp*, (argIL, typ)*): paramtyp*
    hint(show ALIGN_PARAMS_WITH_ARGS%latex("(")#%1#%latex(", ")#%2#%latex(")"))
dec $align_params_with_args'(pmap, paramtyp, (argIL, typ)): paramtyp
    hint(show ALIGN_PARAMS_WITH_ARGS'%latex("(")#%1#%latex(", ")#%2#%latex(", ")#%3#%latex(")"))

def $align_params_with_args(pt*, (argIL, typ)*) = pt'*
  -- if (id _ _ _ = pt)*
  -- if pmap = `{ (id -> pt)* }
  -- (if pt' = $align_params_with_args'(pmap, pt, (argIL, typ)))*

def $align_params_with_args'(pmap, pt, (ExprA _, _)) = pt
def $align_params_with_args'(pmap, pt, (NameA id _, _)) = pt'
  -- if pt' = $find_map<id, paramtyp>(pmap, id)
def $align_params_with_args'(pmap, pt, (AnyA, _)) = pt

;;
;; Type inference
;;

syntax typcstr =
  | KNOWN typ
  | UNKNOWN

var cstr : map<tid, typcstr>

dec $empty_cstr(tid*) : map<tid, typcstr>
    ;;hint(show EMPTY_CSTR(%1))

def $empty_cstr(tid*) = `{ (tid -> UNKNOWN)* }


dec $gen_cstr(map<tid, typcstr>, typ, typ) : map<tid, typcstr>
    ;;hint(show GEN_CSTR(%1, %2, %3))
dec $gen_cstrs(map<tid, typcstr>, typ*, typ*) : map<tid, typcstr>
    ;;hint(show GEN_CSTRS(%1, %2, %3))
dec $gen_cstr_fd(map<tid, typcstr>, funcdef, funcdef) : map<tid, typcstr>
    ;;hint(show GEN_CSTR_FD(%1, %2, %3))
dec $gen_cstr_fd'(map<tid, typcstr>, fid*, fdenv, fdenv) : map<tid, typcstr>
    ;;hint(show GEN_CSTR_FD'(%1, %2, %3, %4))
dec $merge_cstr(map<tid, typcstr>, map<tid, typcstr>) : map<tid, typcstr>
    ;;hint(show MERGE_CSTR(%1, %2))
dec $merge_cstr'(map<tid, typcstr>, map<tid, typcstr>, tid*, map<tid, typcstr>) : map<tid, typcstr>
    ;;hint(show MERGE_CSTR'(%1, %2, %3, %4))
dec $merge_cstrs(map<tid, typcstr>, map<tid, typcstr>*) : map<tid, typcstr>
    ;;hint(show MERGE_CSTRS(%1, %2))
dec $resolve_cstrs(map<tid, typcstr>) : map<tid, typ>
    ;;hint(show RESOLVE_CSTRS(%1))

def $gen_cstr(cstr, VarT tid, typ_a) = $update_map<tid, typcstr>(cstr, tid, KNOWN typ_a)
  -- if $in_set<tid>(tid, $dom_map<tid, typcstr>(cstr))

def $gen_cstr(cstr, SpecT ptd_p typ_p'*, SpecT ptd_a typ_a'*) = $gen_cstrs(cstr', typ_p'*, typ_a'*)
  -- if typ_p'' = $specialize_typdef(ptd_p, typ_p'*)
  -- if typ_a'' = $specialize_typdef(ptd_a, typ_a'*)
  -- if $is_nominal(typ_p'') /\ $is_nominal(typ_a'')
  -- if cstr' = $gen_cstr(cstr, typ_p'', typ_a'')

def $gen_cstr(cstr, SpecT ptd_p typ_p'*, SpecT ptd_a typ_a'*) = cstr'
  -- if typ_p'' = $specialize_typdef(ptd_p, typ_p'*)
  -- if typ_a'' = $specialize_typdef(ptd_a, typ_a'*)
  -- if ~($is_nominal(typ_p'') /\ $is_nominal(typ_a''))
  -- if cstr' = $gen_cstr(cstr, typ_p'', typ_a'')

def $gen_cstr(cstr, DefT typ_p', typ_a) = $gen_cstr(cstr, typ_p', typ_a)

def $gen_cstr(cstr, typ_p, DefT typ_a') = $gen_cstr(cstr, typ_p, typ_a')

def $gen_cstr(cstr, NewT id typ_p', NewT id typ_a') = $gen_cstr(cstr, typ_p', typ_a')

def $gen_cstr(cstr, ListT typ_p, ListT typ_a) = $gen_cstr(cstr, typ_p, typ_a)

def $gen_cstr(cstr, TupleT typ_p*, TupleT typ_a*) = $gen_cstrs(cstr, typ_p*, typ_a*)

def $gen_cstr(cstr, StackT typ_p' i_p, StackT typ_a' i_a) = $gen_cstr(cstr, typ_p', typ_a')

def $gen_cstr(cstr, StructT id (member_p, typ_p')*, StructT id (member_a, typ_a')*) = $gen_cstrs(cstr, typ_p'*, typ_a'*)

def $gen_cstr(cstr, HeaderT id (member_p, typ_p')*, HeaderT id (member_a, typ_a')*) = $gen_cstrs(cstr, typ_p'*, typ_a'*)

def $gen_cstr(cstr, UnionT id (member_p, typ_p')*, UnionT id (member_a, typ_a')*) = $gen_cstrs(cstr, typ_p'*, typ_a'*)

def $gen_cstr(cstr, ExternT id fdenv_p, ExternT id fdenv_a) = $gen_cstr_fd'(cstr, fid_p*, fdenv_p, fdenv_a)
  -- if `{ (fid_p -> fd_p)* } = fdenv_p
  -- if `{ (fid_a -> fd_a)* } = fdenv_a
  -- if $eq_set<fid>(`{ fid_p* }, `{ fid_a* })

def $gen_cstr(cstr, ParserT pt_p*, ParserT pt_a*) = $gen_cstrs(cstr, typ_p'*, typ_a'*)
  -- if (_ dir typ_p' _ = pt_p)*
  -- if (_ dir typ_a' _ = pt_a)*

def $gen_cstr(cstr, ControlT pt_p*, ControlT pt_a*) = $gen_cstrs(cstr, typ_p'*, typ_a'*)
  -- if (_ dir typ_p' _ = pt_p)*
  -- if (_ dir typ_a' _ = pt_a)*

def $gen_cstr(cstr, PackageT typ_p*, PackageT typ_a*) = $gen_cstrs(cstr, typ_p*, typ_a*)

def $gen_cstr(cstr, typ_p, typ_a) = cstr
  -- otherwise


def $gen_cstrs(cstr, typ_p*, typ_a*) = $merge_cstrs(cstr, cstr'*)
  -- if |typ_p*| = |typ_a*|
  -- if (cstr' = $gen_cstr(cstr, typ_p, typ_a))*


def $gen_cstr_fd(cstr, fd_p, fd_a) = cstr''
  -- if (_ _ typ_p _)* = $get_params_funcdef(fd_p)
  -- if (_ _ typ_a _)* = $get_params_funcdef(fd_a)
  -- if cstr' = $gen_cstrs(cstr, typ_p*, typ_a*)
  -- if cstr'' = $gen_cstr(cstr', $get_typ_ret_funcdef(fd_p), $get_typ_ret_funcdef(fd_a))

def $gen_cstr_fd'(cstr, eps, fdenv_p, fdenv_a) = cstr

def $gen_cstr_fd'(cstr, fid_h :: fid_t*, fdenv_p, fdenv_a) = $gen_cstr_fd'(cstr', fid_t*, fdenv_p, fdenv_a)
  -- if fd_p = $find_map<fid, funcdef>(fdenv_p, fid_h)
  -- if fd_a = $find_map<fid, funcdef>(fdenv_a, fid_h)
  -- if cstr' = $gen_cstr_fd(cstr, fd_p, fd_a)


def $merge_cstr(cstr_o, cstr_n) = $merge_cstr'(cstr_o, cstr_n, tid_o*, `{ eps })
  -- if `{ tid_o* } = $dom_map<tid, typcstr>(cstr_o)
  -- if $eq_set<tid>($dom_map<tid, typcstr>(cstr_o), $dom_map<tid, typcstr>(cstr_n))


def $merge_cstr'(cstr_o, cstr_n, eps, cstr) = cstr

def $merge_cstr'(cstr_o, cstr_n, tid_h :: tid_t*, cstr) = $merge_cstr'(cstr_o, cstr_n, tid_t*, cstr')
  -- if $find_map<tid, typcstr>(cstr_o, tid_h) = UNKNOWN
  -- if $find_map<tid, typcstr>(cstr_n, tid_h) = UNKNOWN
  -- if cstr' = $update_map<tid, typcstr>(cstr, tid_h, UNKNOWN)

def $merge_cstr'(cstr_o, cstr_n, tid_h :: tid_t*, cstr) = $merge_cstr'(cstr_o, cstr_n, tid_t*, cstr')
  -- if $find_map<tid, typcstr>(cstr_o, tid_h) = UNKNOWN
  -- if $find_map<tid, typcstr>(cstr_n, tid_h) = KNOWN typ_n
  -- if cstr' = $update_map<tid, typcstr>(cstr, tid_h, KNOWN typ_n)

def $merge_cstr'(cstr_o, cstr_n, tid_h :: tid_t*, cstr) = $merge_cstr'(cstr_o, cstr_n, tid_t*, cstr')
  -- if $find_map<tid, typcstr>(cstr_o, tid_h) = KNOWN typ_o
  -- if $find_map<tid, typcstr>(cstr_n, tid_h) = UNKNOWN
  -- if cstr' = $update_map<tid, typcstr>(cstr, tid_h, KNOWN typ_o)

def $merge_cstr'(cstr_o, cstr_n, tid_h :: tid_t*, cstr) = $merge_cstr'(cstr_o, cstr_n, tid_t*, cstr')
  -- if $find_map<tid, typcstr>(cstr_o, tid_h) = KNOWN typ_o
  -- if $find_map<tid, typcstr>(cstr_n, tid_h) = KNOWN typ_n
  -- Sub_impl: typ_o << typ_n
  -- if cstr' = $update_map<tid, typcstr>(cstr, tid_h, KNOWN typ_n)

def $merge_cstr'(cstr_o, cstr_n, tid_h :: tid_t*, cstr) = $merge_cstr'(cstr_o, cstr_n, tid_t*, cstr')
  -- if $find_map<tid, typcstr>(cstr_o, tid_h) = KNOWN typ_o
  -- if $find_map<tid, typcstr>(cstr_n, tid_h) = KNOWN typ_n
  -- Sub_impl:/ typ_o << typ_n
  -- Sub_impl: typ_n << typ_o
  -- if cstr' = $update_map<tid, typcstr>(cstr, tid_h, KNOWN typ_o)


def $merge_cstrs(cstr, eps) = cstr
def $merge_cstrs(cstr, cstr_h :: cstr_t*) = cstr''
  -- if cstr' = $merge_cstr(cstr, cstr_h)
  -- if cstr'' = $merge_cstrs(cstr', cstr_t*)


def $resolve_cstrs(`{ eps }) = `{ eps }

def $resolve_cstrs(`{ ((tid_h -> (KNOWN typ_h)) :: (tid_t -> typcstr_t)*) })
  = $add_map<tid, typ>(`{ (tid_t' -> typ_t')* }, tid_h, typ_h)
  -- if typ_h =/= AnyT
  -- if `{ (tid_t' -> typ_t')* } = $resolve_cstrs(`{ (tid_t -> typcstr_t)* })


dec $infer_targs(tid*, paramtyp*, typ*) : map<tid, typ>
    ;;hint(show INFER_TARGS(%1, %2, %3))

def $infer_targs(tid*, (id dir typ_p val?)*, typ_a*) = $resolve_cstrs(cstr')
  -- if cstr = $empty_cstr(tid*)
  -- if cstr' = $gen_cstrs(cstr, typ_p*, typ_a*)

;;
;; Function and Method invocation
;;

rule Call_site_ok/block-externfunc:
  BLOCK C |- ExternFuncT _ _ : CALLSITE_OK
  -- if C.BLOCK.KIND = PARSER \/ C.BLOCK.KIND = CONTROL

rule Call_site_ok/block-builtinmethod:
  BLOCK C |- BuiltinMethodT _ _ : CALLSITE_OK
  -- if C.BLOCK.KIND = PARSER \/ C.BLOCK.KIND = CONTROL

rule Call_site_ok/block-externmethod:
  BLOCK C |- ExternMethodT _ _ : CALLSITE_OK
  -- if C.BLOCK.KIND = PARSER \/ C.BLOCK.KIND = CONTROL

rule Call_site_ok/block-externabstractmethod:
  BLOCK C |- ExternAbstractMethodT _ _ : CALLSITE_OK
  -- if C.BLOCK.KIND = PARSER \/ C.BLOCK.KIND = CONTROL

rule Call_site_ok/local-action:
  LOCAL C |- ActionT _ : CALLSITE_OK
  -- if C.LOCAL.KIND = ACTION
        \/ C.LOCAL.KIND = CONTROLAPPLYMETHOD
        \/ C.LOCAL.KIND = TABLEAPPLYMETHOD

rule Call_site_ok/local-func-func:
  LOCAL C |- FuncT _ _ : CALLSITE_OK
  -- if C.LOCAL.KIND = FUNC typ

rule Call_site_ok/local-func-else:
  LOCAL C |- FuncT _ _ : CALLSITE_OK
  -- if C.LOCAL.KIND = ACTION
        \/ C.LOCAL.KIND = PARSERSTATE
        \/ C.LOCAL.KIND = CONTROLAPPLYMETHOD
        \/ C.LOCAL.KIND = TABLEAPPLYMETHOD

rule Call_site_ok/local-externfunc-externabstractmethod:
  LOCAL C |- ExternFuncT _ _ : CALLSITE_OK
  -- if C.LOCAL.KIND = EXTERNABSTRACTMETHOD typ

rule Call_site_ok/local-externfunc-else:
  LOCAL C |- ExternFuncT _ _ : CALLSITE_OK
  -- if C.LOCAL.KIND = ACTION
        \/ C.LOCAL.KIND = PARSERSTATE
        \/ C.LOCAL.KIND = CONTROLAPPLYMETHOD
        \/ C.LOCAL.KIND = TABLEAPPLYMETHOD

rule Call_site_ok/local-builtinmethod-func:
  LOCAL C |- BuiltinMethodT _ _ : CALLSITE_OK
  -- if C.LOCAL.KIND = FUNC typ

rule Call_site_ok/local-builtinmethod-externabstractmethod:
  LOCAL C |- BuiltinMethodT _ _ : CALLSITE_OK
  -- if C.LOCAL.KIND = EXTERNABSTRACTMETHOD typ

rule Call_site_ok/local-builtinmethod-else:
  LOCAL C |- BuiltinMethodT _ _ : CALLSITE_OK
  -- if C.LOCAL.KIND = ACTION
        \/ C.LOCAL.KIND = PARSERSTATE
        \/ C.LOCAL.KIND = CONTROLAPPLYMETHOD
        \/ C.LOCAL.KIND = TABLEAPPLYMETHOD

rule Call_site_ok/local-externmethod-externabstractmethod:
  LOCAL C |- ExternMethodT _ _ : CALLSITE_OK
  -- if C.LOCAL.KIND = EXTERNABSTRACTMETHOD typ

rule Call_site_ok/local-externmethod-else:
  LOCAL C |- ExternMethodT _ _ : CALLSITE_OK
  -- if C.LOCAL.KIND = ACTION
        \/ C.LOCAL.KIND = PARSERSTATE
        \/ C.LOCAL.KIND = CONTROLAPPLYMETHOD
        \/ C.LOCAL.KIND = TABLEAPPLYMETHOD

rule Call_site_ok/local-externabstractmethod-externabstractmethod:
  LOCAL C |- ExternAbstractMethodT _ _ : CALLSITE_OK
  -- if C.LOCAL.KIND = EXTERNABSTRACTMETHOD typ

rule Call_site_ok/local-externabstractmethod-else:
  LOCAL C |- ExternAbstractMethodT _ _ : CALLSITE_OK
  -- if C.LOCAL.KIND = ACTION
        \/ C.LOCAL.KIND = PARSERSTATE
        \/ C.LOCAL.KIND = CONTROLAPPLYMETHOD
        \/ C.LOCAL.KIND = TABLEAPPLYMETHOD

rule Call_site_ok/local-parserapplymethod:
  LOCAL C |- ParserApplyMethodT _ : CALLSITE_OK
  -- if C.LOCAL.KIND = PARSERSTATE

rule Call_site_ok/local-controlapplymethod:
  LOCAL C |- ControlApplyMethodT _ : CALLSITE_OK
  -- if C.LOCAL.KIND = CONTROLAPPLYMETHOD

rule Call_site_ok/local-tableapplymethod:
  LOCAL C |- TableApplyMethodT _ : CALLSITE_OK
  -- if C.LOCAL.KIND = CONTROLAPPLYMETHOD
        \/ C.LOCAL.KIND = TABLEAPPLYMETHOD


dec $is_table_apply_in_action_arg(argIL) : bool
    hint(show % CONTAINS TABLE.APPLY CALL)

;; (TODO) Always false for now
def $is_table_apply_in_action_arg(argIL) = false


rule Call_ok/actiont:
  p C eps |- (ActionT pt*) targIL* arg* id_deft* : VoidT eps argIL*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- (Arg_ok: p C |- arg : argIL typ_a)*
  ----
  -- if |pt'*| = |argIL*|
  -- if pt''* = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- FuncType_wf: $bound_tids(p, C) |- ActionT pt*
  -- Call_site_ok: p C |- ActionT pt* : CALLSITE_OK
  -- if (~$is_table_apply_in_action_arg(argIL))*
  ----
  -- (Call_convention_arg_ok: p C ACT |- pt'' ~~ (argIL, typ_a) : argIL'')*

rule Call_ok/extern-funct-no-targsinfer:
  p C eps |- (ExternFuncT pt* typ_r) targIL* arg* id_deft* : typ_r targIL* argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- (Arg_ok: p C |- arg : argIL typ_a)*
  ----
  -- if |pt'*| = |argIL*|
  -- if pt''* = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- FuncType_wf: $bound_tids(p, C) |- ExternFuncT pt* typ_r
  ----
  -- Call_site_ok: p C |- ExternFuncT pt* typ_r : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt'' ~~ (argIL, typ_a) : argIL'')*

rule Call_ok/extern-funct-targsinfer:
  p C tid_fresh* |- (ExternFuncT pt* typ_r) targIL* arg* id_deft* : typ_r' targIL''* argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- (Arg_ok: p C |- arg : argIL typ_a)*
  ----
  -- if |pt'*| = |argIL*|
  -- if pt''* = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- if theta = $infer_targs(tid_fresh*, pt''*, typ_a*)
  ----
  -- if (targIL' = $find_map<tid, typ>(theta, tid_fresh))*
  -- if targIL''* = targIL* ++ targIL'*
  ----
  -- if ExternFuncT pt'''* typ_r' = $subst_functyp(theta, ExternFuncT pt''* typ_r)
  ----
  -- FuncType_wf: $bound_tids(p, C) |- ExternFuncT pt'''* typ_r'
  ----
  -- Call_site_ok: p C |- ExternFuncT pt'''* typ_r' : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt''' ~~ (argIL, typ_a) : argIL'')*

rule Call_ok/funct-no-targsinfer:
  p C eps |- (FuncT pt* typ_r) targIL* arg* id_deft* : typ_r targIL* argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- (Arg_ok: p C |- arg : argIL typ_a)*
  ----
  -- if |pt'*| = |argIL*|
  -- if pt''* = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- FuncType_wf: $bound_tids(p, C) |- (FuncT pt* typ_r)
  ----
  -- Call_site_ok: p C |- FuncT pt* typ_r : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt'' ~~ (argIL, typ_a) : argIL'')*

rule Call_ok/funct-targsinfer:
  p C tid_fresh* |- (FuncT pt* typ_r) targIL* arg* id_deft* : typ_r' targIL''* argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- (Arg_ok: p C |- arg : argIL typ_a)*
  ----
  -- if |pt'*| = |argIL*|
  -- if pt''* = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- if theta = $infer_targs(tid_fresh*, pt''*, typ_a*)
  ----
  -- if (targIL' = $find_map<tid, typ>(theta, tid_fresh))*
  -- if targIL''* = targIL* ++ targIL'*
  ----
  -- if FuncT pt'''* typ_r' = $subst_functyp(theta, FuncT pt''* typ_r)
  ----
  -- FuncType_wf: $bound_tids(p, C) |- (FuncT pt'''* typ_r')
  ----
  -- Call_site_ok: p C |- FuncT pt'''* typ_r' : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt''' ~~ (argIL, typ_a) : argIL'')*

rule Call_ok/builtin-methodt:
  p C eps |- (BuiltinMethodT pt* typ_r) eps arg* id_deft* : typ_r eps argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- (Arg_ok: p C |- arg : argIL typ_a)*
  ----
  -- if |pt'*| = |argIL*|
  -- if pt''* = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- FuncType_wf: $bound_tids(p, C) |- BuiltinMethodT pt* typ_r
  ----
  -- Call_site_ok: p C |- BuiltinMethodT pt* typ_r : CALLSITE_OK
  -- (Call_convention_arg_ok: p C NOACT |- pt'' ~~ (argIL, typ_a) : argIL'')*

rule Call_ok/extern-methodt-no-targsinfer:
  p C eps |- (ExternMethodT pt* typ_r) targIL* arg* id_deft* : typ_r targIL* argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- (Arg_ok: p C |- arg : argIL typ_a)*
  ----
  -- if |pt'*| = |argIL*|
  -- if pt''* = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- FuncType_wf: $bound_tids(p, C) |- ExternMethodT pt* typ_r
  ----
  -- Call_site_ok: p C |- ExternMethodT pt* typ_r : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt'' ~~ (argIL, typ_a) : argIL'')*

rule Call_ok/extern-methodt-targsinfer:
  p C tid_fresh* |- (ExternMethodT pt* typ_r) targIL* arg* id_deft* : typ_r' targIL''* argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- (Arg_ok: p C |- arg : argIL typ_a)*
  ----
  -- if |pt'*| = |argIL*|
  -- if pt''* = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- if theta = $infer_targs(tid_fresh*, pt''*, typ_a*)
  ----
  -- if (targIL' = $find_map<tid, typ>(theta, tid_fresh))*
  -- if targIL''* = targIL* ++ targIL'*
  ----
  -- if ExternMethodT pt'''* typ_r' = $subst_functyp(theta, ExternMethodT pt''* typ_r)
  ----
  -- FuncType_wf: $bound_tids(p, C) |- ExternMethodT pt'''* typ_r'
  ----
  -- Call_site_ok: p C |- ExternMethodT pt'''* typ_r' : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt''' ~~ (argIL, typ_a) : argIL'')*

rule Call_ok/extern-abstract-methodt-no-targsinfer:
  p C eps |- (ExternAbstractMethodT pt* typ_r) targIL* arg* id_deft* : typ_r targIL* argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- (Arg_ok: p C |- arg : argIL typ_a)*
  ----
  -- if |pt'*| = |argIL*|
  -- if pt''* = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- FuncType_wf: $bound_tids(p, C) |- ExternAbstractMethodT pt* typ_r
  ----
  -- Call_site_ok: p C |- ExternAbstractMethodT pt* typ_r : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt'' ~~ (argIL, typ_a) : argIL'')*

rule Call_ok/extern-abstract-methodt-targsinfer:
  p C tid_fresh* |- (ExternAbstractMethodT pt* typ_r) targIL* arg* id_deft* : typ_r' targIL''* argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- (Arg_ok: p C |- arg : argIL typ_a)*
  ----
  -- if |pt'*| = |argIL*|
  -- if pt''* = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- if theta = $infer_targs(tid_fresh*, pt''*, typ_a*)
  ----
  -- if (targIL' = $find_map<tid, typ>(theta, tid_fresh))*
  -- if targIL''* = targIL* ++ targIL'*
  ----
  -- if ExternAbstractMethodT pt'''* typ_r' = $subst_functyp(theta, ExternAbstractMethodT pt''* typ_r)
  ----
  -- FuncType_wf: $bound_tids(p, C) |- ExternAbstractMethodT pt'''* typ_r'
  ----
  -- Call_site_ok: p C |- ExternAbstractMethodT pt'''* typ_r' : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt''' ~~ (argIL, typ_a) : argIL'')*

rule Call_ok/parser-apply-methodt:
  p C eps |- (ParserApplyMethodT pt*) eps arg* id_deft* : VoidT eps argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- (Arg_ok: p C |- arg : argIL typ_a)*
  ----
  -- if |pt'*| = |argIL*|
  -- if pt''* = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- FuncType_wf: $bound_tids(p, C) |- (ParserApplyMethodT pt*)
  ----
  -- Call_site_ok: p C |- ParserApplyMethodT pt* : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt'' ~~ (argIL, typ_a) : argIL'')*

rule Call_ok/control-apply-methodt:
  p C eps |- (ControlApplyMethodT pt*) eps arg* id_deft* : VoidT eps argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- (Arg_ok: p C |- arg : argIL typ_a)*
  ----
  -- if |pt'*| = |argIL*|
  -- if pt''* = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- FuncType_wf: $bound_tids(p, C) |- ControlApplyMethodT pt*
  ----
  -- Call_site_ok: p C |- ControlApplyMethodT pt* : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt'' ~~ (argIL, typ_a) : argIL'')*

rule Call_ok/table-apply-methodt:
  p C eps |- (TableApplyMethodT typ_r) eps eps eps : typ_r eps eps
  -- FuncType_wf: $bound_tids(p, C) |- TableApplyMethodT typ_r
  ----
  -- Call_site_ok: p C |- TableApplyMethodT typ_r : CALLSITE_OK

;;
;; Constructor typing
;;

rule ConsType_ok:
   p C |- name targIL* arg* : ct tid_fresh* id_deft*
   -- if (cid, cd, id_deft*) = $find_consdef(GLOBAL, C, name, arg*)
   -- if (ct, tid_fresh*) = $specialize_consdef(cd, targIL*)

;;
;; Constructor invocation
;;

rule Inst_site_ok/global:
  GLOBAL C |- (ConsT pt* typ_i) : INSTSITE_OK
  -- if typ_i' = $canon_typ(typ_i)
  -- if $is_externt(typ_i') \/ $is_packaget(typ_i')

rule Inst_site_ok/block-package:
  BLOCK C |- (ConsT pt* typ_i) : INSTSITE_OK
  -- if typ_i' = $canon_typ(typ_i)
  -- if C.BLOCK.KIND = PACKAGE
  ----
  -- if $is_externt(typ_i') \/ $is_parsert(typ_i')
      \/ $is_controlt(typ_i') \/ $is_packaget(typ_i')

rule Inst_site_ok/block-parser:
  BLOCK C |- (ConsT pt* typ_i) : INSTSITE_OK
  -- if typ_i' = $canon_typ(typ_i)
  -- if C.BLOCK.KIND = PARSER
  ----
  -- if $is_externt(typ_i') \/ $is_parsert(typ_i')

rule Inst_site_ok/block-control:
  BLOCK C |- (ConsT pt* typ_i) : INSTSITE_OK
  -- if typ_i' = $canon_typ(typ_i)
  -- if C.BLOCK.KIND = CONTROL
  ----
  -- if $is_externt(typ_i') \/ $is_controlt(typ_i') \/ $is_tablet(typ_i')

rule Inst_site_ok/local-parserstate:
  LOCAL C |- (ConsT pt* typ_i) : INSTSITE_OK
  -- if typ_i' = $canon_typ(typ_i)
  -- if C.LOCAL.KIND = PARSERSTATE
  ----
  -- if $is_externt(typ_i') \/ $is_parsert(typ_i')

rule Inst_site_ok/local-controlapplymethod:
  LOCAL C |- (ConsT pt* typ_i) : INSTSITE_OK
  -- if typ_i' = $canon_typ(typ_i)
  -- if C.LOCAL.KIND = CONTROLAPPLYMETHOD
  ----
  -- if $is_externt(typ_i') \/ $is_controlt(typ_i')


rule Inst_ok/global-packaget-no-targsinfer:
  GLOBAL C_0 eps |- ct targIL* arg* id_deft* : typ_i targIL* argIL''*
  -- if ConsT pt* typ_i = ct
  -- if $is_packaget($canon_typ(typ_i))
  ----
  -- if C_1 = $set_blockkind(C_0, PACKAGE)
  -- (Arg_ok: BLOCK C_1 |- arg : argIL typ_a)*
  ----
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if pt''* = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- ConsType_wf: $bound_tids(GLOBAL, C_0) |- ConsT pt* typ_i
  ----
  -- Inst_site_ok: GLOBAL C_0 |- (ConsT pt* typ_i) : INSTSITE_OK
  -- (Call_convention_arg_ok: BLOCK C_1 NOACT |- pt'' ~~ (argIL, typ_a) : argIL'')*

rule Inst_ok/global-packaget-targsinfer:
  GLOBAL C_0 tid_fresh* |- ct targIL* arg* id_deft* : typ_i' targIL''* argIL''*
  -- if ConsT pt* typ_i = ct
  -- if $is_packaget($canon_typ(typ_i))
  ----
  -- if |tid_fresh*| > 0
  ----
  -- if C_1 = $set_blockkind(C_0, PACKAGE)
  -- (Arg_ok: BLOCK C_1 |- arg : argIL typ_a)*
  ----
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if pt''* = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- if theta = $infer_targs(tid_fresh*, pt''*, typ_a*)
  ----
  -- if (targIL' = $find_map<tid, typ>(theta, tid_fresh))*
  -- if targIL''* = targIL* ++ targIL'*
  ----
  -- if ConsT pt'''* typ_i' = $subst_constyp(theta, ConsT pt''* typ_i)
  ----
  -- ConsType_wf: $bound_tids(GLOBAL, C_0) |- (ConsT pt'''* typ_i')
  ----
  -- Inst_site_ok: GLOBAL C_0 |- (ConsT pt'''* typ_i') : INSTSITE_OK
  -- (Call_convention_arg_ok: BLOCK C_1 NOACT |- pt''' ~~ (argIL, typ_a) : argIL'')*

rule Inst_ok/else-no-targsinfer:
  p C eps |- ct targIL* arg* id_deft* : typ_i targIL* argIL''*
  -- if ConsT pt* typ_i = ct
  -- if ~((p = GLOBAL) /\ $is_packaget($canon_typ(typ_i)))
  ----
  -- (Arg_ok: p C |- arg : argIL typ_a)*
  ----
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if pt''* = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- ConsType_wf: $bound_tids(p, C) |- ConsT pt* typ_i
  ----
  -- Inst_site_ok: p C |- (ConsT pt* typ_i) : INSTSITE_OK
  -- (Call_convention_arg_ok: p C NOACT |- pt'' ~~ (argIL, typ_a) : argIL'')*

rule Inst_ok/else-targsinfer:
  p C tid_fresh* |- ct targIL* arg* id_deft* : typ_i' targIL* argIL''*
  -- if ConsT pt* typ_i = ct
  -- if ~((p = GLOBAL) /\ $is_packaget($canon_typ(typ_i)))
  ----
  -- (Arg_ok: p C |- arg : argIL typ_a)*
  ----
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if pt''* = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- if theta = $infer_targs(tid_fresh*, pt''*, typ_a*)
  ----
  -- if (targIL' = $find_map<tid, typ>(theta, tid_fresh))*
  -- if targIL''* = targIL* ++ targIL'*
  ----
  -- if ConsT pt'''* typ_i' = $subst_constyp(theta, ConsT pt''* typ_i)
  ----
  -- ConsType_wf: $bound_tids(p, C) |- ConsT pt'''* typ_i'
  ----
  -- Inst_site_ok: p C |- (ConsT pt'''* typ_i') : INSTSITE_OK
  -- (Call_convention_arg_ok: p C NOACT |- pt''' ~~ (argIL, typ_a) : argIL'')*
